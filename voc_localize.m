function [Voc_filename,Voc_samp_idx,Voc_transc_time] = voc_localize(Voc_dir,RawWav_dir, Date, ExpStartTime, varargin)
%% VOC_LOCALIZE a function to retrieve the position of manual extracts in continuous recordings
% Inputs
% Voc_dir is the folder containing the vocalization extracts to identify

% RawWav_dir is the folder containing the continuous recordings and the
% file *TTLPulseTimes.mat generated by align_soundmexAudio_2_logger.m
% or align_avisoft_2_logger.m in case calculating transceiver time is requested

% 'TransceiverTime' (optional input): set by default to 1 to calculate the
% onset anf offset of sound extracts in transceiver time

% Ouputs
% Voc_filename is the file list of manual extracts 

% Voc_samp_idx is a 2 column vector that gives the onset and offset indices
% of each extract in the original recordings, same number of lines as
% Voc_filename

% Voc_transc_time is a 2 column vector that gives the expected onset and offest
% times of each extract in the piezo logger recordings in transceiver time,
% in ms
% same number of lines as Voc_filename.

%% Load data and initialize output variables
% Get input arguments
Pnames = {'TransceiverTime', 'Avisoft'};
TranscTime = 1; % Logical to indicate if transceiver time should be calculated for these extracts.
Avisoft = 0; % Logical to indicate if extract files were generated by vocOperant or Avisoft
Dflts  = {TranscTime Avisoft};
[TranscTime, Avisoft] = internal.stats.parseArgs(Pnames,Dflts,varargin{:});

if TranscTime
    if Avisoft
         % Load the pulse times and samples
        TTL_dir = dir(fullfile(RawWav_dir,sprintf( '%s_TTLPulseTimes.mat', Date)));
    else
        % Load the pulse times and samples
        TTL_dir = dir(fullfile(RawWav_dir,sprintf( '%s_%s_TTLPulseTimes.mat', Date, ExpStartTime)));
    end
    TTL = load(fullfile(TTL_dir.folder, TTL_dir.name));
end

% List of manual extracts
AllVocs = dir(fullfile(Voc_dir, sprintf('*%s*.wav', Date)));

% If taken of avisoft we need to resample the input files, so getting ready
% the filters
AllRaws = dir(fullfile(RawWav_dir, '*.wav'));
[~,FS] = audioread(fullfile(AllRaws(1).folder, AllRaws(1).name));
if Avisoft
    [z,p,k] = butter(6,[2000 88000]/(FS/2),'bandpass');
    sos_raw_band = zp2sos(z,p,k);
else
    [z,p,k] = butter(6,[1000 90000]/(FS/2),'bandpass');
    sos_raw_band = zp2sos(z,p,k);
end

% initialize variables
NVoc = length(AllVocs);
Voc_filename = cell(NVoc,1);
Voc_samp_idx = nan(NVoc,2);
Voc_transc_time = nan(NVoc,2);
MeanStdAmpRawFile = nan(100,2);
MeanStdAmpRawExtract = nan(NVoc,2);

%% Loop through extracts and localize them
for vv=1:NVoc
    fprintf('vocalization %d/%d\n',vv, NVoc);
    % load the extract
    Voc_filename{vv} = fullfile(AllVocs(vv).folder, AllVocs(vv).name);
    [Voc_wav] = audioread(Voc_filename{vv});
    
    % load the raw file
    Idx_ = strfind(AllVocs(vv).name, '_');
    if Avisoft
        Raw_filename = fullfile(RawWav_dir, [AllVocs(vv).name(1:(Idx_(end-1)-1)) '.wav']);
        [Sound, FS] = audioread(Raw_filename);
        Sound = filtfilt(sos_raw_band,1,Sound);
        Raw_wav = resample(Sound, 44100, FS);
    else
        Raw_filename = fullfile(RawWav_dir, [AllVocs(vv).name(1:(Idx_(end)-1)) '.wav']);
        [Raw_wav, FS] = audioread(Raw_filename);
    end
    
    % Identify raw file index
    if Avisoft
        FileIdx=str2double(AllVocs(vv).name(Idx_(end-2)+1 : Idx_(end-1)-1));
    else
        FileIdx = str2double(AllVocs(vv).name((Idx_(end-1)+1):(Idx_(end)-1)));
    end
    
    if isnan(MeanStdAmpRawFile(File_Idx,1)) % calculate the amplitude threshold for that file
        % Calculate the amplitude threshold as the average amplitude on the
        % first 30 seconds of that 10 min recording file from which that file
        % come from
        % Get the average running rms in a Dur_RMS min extract in the middle of
        % the recording
        fprintf(1, 'Calculating average RMS values on a %d min sample of silence\n',Dur_RMS);
        SampleDur = round(Dur_RMS*60*FS);
        StartSamp = round(length(Raw_wav)/2);
        fprintf(1,'Calculating the amplitude threshold for file %d  ',File_Idx)
        BadSection = 1;
        while BadSection
            Filt_RawVoc = filtfilt(sos_raw_band,1,Raw_wav(StartSamp + (1:SampleDur)));
            Amp_env_Mic = running_rms(Filt_RawVoc, FS, Fhigh_power, Fs_env);
            if any(Amp_env_voltage_low>75) % there is most likely a vocalization in this sequence look somewhere else! Threshold used to be 50 but I changed it because of TTL pulses noise
                StartSamp = StartSamp + SampleDur +1;
            else
                BadSection = 0;
            end
        end
        MeanStdAmpRawFile(File_Idx,1) = mean(Amp_env_Mic);
        MeanStdAmpRawFile(File_Idx,2) = std(Amp_env_Mic);
        fprintf('-> Done\n')
    end
    MeanStdAmpRawExtract(vv,1)= MeanStdAmpRawFile(File_Idx,1);
    MeanStdAmpRawExtract(vv,2)= MeanStdAmpRawFile(File_Idx,2);
    
    % Find the localization of the extract in
    % the raw file
    Voc_samp_idx(vv,1) = strfind(Raw_wav', Voc_wav');
    Voc_samp_idx(vv,2) = Voc_samp_idx(vv,1) + length(Voc_wav);
     
    % Plot the result of the identification
    Buffer = 100; % in ms
    Raw_extract = Raw_wav((Voc_samp_idx(vv,1)-Buffer*FS*10^-3):(Voc_samp_idx(vv,2)+Buffer*FS*10^-3));
    plot(Raw_extract, 'k-', 'LineWidth',2);
    hold on
    plot(Buffer*FS*10^-3+(1:length(Voc_wav)), Voc_wav, 'g-')
    legend({'Raw recording', 'extract'})
    line(ones(1,2)*Buffer*FS*10^-3,[min(Voc_wav) max(Voc_wav)], 'Color', 'b', 'LineStyle', ':')
    line(length(Voc_wav) + ones(1,2)*Buffer*FS*10^-3,[min(Voc_wav) max(Voc_wav)], 'Color', 'b', 'LineStyle', ':')
    hold off
    pause(1)
    
    if TranscTime
        % Extract the transceiver time 
        % zscore the sample stamps
        TTL_idx = find(unique(TTL.File_number) == FileIdx);
        if Avisoft
            Voc_samp_idx_zs = ((Voc_samp_idx(vv,:) + TTL.Total_samples_by_file(TTL_idx-1)).*TTL.FS_wav  - TTL.Mean_std_Pulse_TimeStamp_audio(TTL_idx,1))/TTL.Mean_std_Pulse_TimeStamp_audio(TTL_idx,2);
            % calculate the transceiver times
            Voc_transc_time(vv,:) = TTL.Mean_std_Pulse_TimeStamp_Transc(TTL_idx,2) .* polyval(TTL.Slope_and_intercept{TTL_idx},Voc_samp_idx_zs,[], TTL.Mean_std_x{TTL_idx}) + TTL.Mean_std_Pulse_TimeStamp_Transc(TTL_idx,1);
        else
            Voc_samp_idx_zs = (Voc_samp_idx(vv,:) - TTL.Mean_std_Pulse_samp_audio(TTL_idx,1))/TTL.Mean_std_Pulse_samp_audio(TTL_idx,2);
            % calculate the transceiver times
            Voc_transc_time(vv,:) = TTL.Mean_std_Pulse_TimeStamp_Transc(TTL_idx,2) .* polyval(TTL.Slope_and_intercept{TTL_idx},Voc_samp_idx_zs,[], TTL.Mean_std_x{TTL_idx}) + TTL.Mean_std_Pulse_TimeStamp_Transc(TTL_idx,1);
        end
    end
end

%% save the calculation results
if TranscTime && ~Avisoft
    save(fullfile(RawWav_dir, sprintf('%s_%s_VocExtractTimes.mat', Date, ExpStartTime)), 'Voc_filename','Voc_samp_idx','Voc_transc_time','MeanStdAmpRawExtract')
elseif TranscTime && Avisoft
    save(fullfile(RawWav_dir, sprintf('%s_VocExtractTimes.mat', Date)), 'Voc_filename','Voc_samp_idx','Voc_transc_time','MeanStdAmpRawExtract')
elseif ~TranscTime && ~Avisoft
    save(fullfile(RawWav_dir, sprintf('%s_%s_VocExtractTimes.mat', Date, ExpStartTime)), 'Voc_filename','Voc_samp_idx','MeanStdAmpRawExtract')
elseif ~TranscTime && Avisoft
    save(fullfile(RawWav_dir, sprintf('%s_VocExtractTimes.mat', Date)), 'Voc_filename','Voc_samp_idx','MeanStdAmpRawExtract')
end
end

