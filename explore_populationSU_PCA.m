% Path 2 Data
Path2AllData = '/Volumes/JulieE8T/LMCResults';
% Path2AllData = '/Users/elie/Documents/LMCResults';
addpath(genpath('/Users/elie/Documents/CODE/GitHub/GeneralCode'))
addpath(genpath('/Users/elie/Documents/CODE/GitHub/LMC'))
ADBitVolts_sorting=500/32767; %Conversion value used in mat2ntt for proper ploting under spikesort3D in AD count
% Let's find the date of interest in the Google sheet
% Path2RecordingTable = '/Users/elie/Google Drive/BatmanData/RecordingLogs/recording_logs.xlsx';
% [~,~,RecTableData]=xlsread(Path2RecordingTable,1,'A1:AF200','basic');
% Header = RecTableData(1,:);
% ND_IDCol = find(contains(Header, 'Neural data voc in operant + PSTH'));
% BatIDCol = find(contains(Header, 'Bat'));
% NLCol = find(contains(Header, 'NL'));
% Dates_Ind = find(cell2mat(RecTableData(2:end,ND_IDCol))==1)+1;
% Dates = cell2mat(RecTableData(Dates_Ind,1));
ThreshSig=50;
%% Loop through spike sorting units and evaluate quality

% Load the list of Spike sorted units generated by
% wrapper_allbehav_neuroscript
load(fullfile(Path2AllData, 'ListSSU.mat'), 'ListSSU')
NU = length(ListSSU);
%%
SSQ = cell(NU,1);
SNR = nan(NU,1);
ContamInd = nan(NU,1);
ISIViolation = nan(NU,1);
SubjID = cell(NU,1);
ListCells = cell(NU,1);
for ss=1:NU
    fprintf(1,'File %d/%d\n',ss,NU)
    [~,FileName] = fileparts(ListSSU{ss});
    Ind_ = strfind(FileName,'_');
    SubjectID_local = FileName(1:5);
    Date = FileName(7:14);
    TetrodeID = FileName(Ind_(2)+3);
    SSQ_local = FileName(Ind_(3)+3);
    SSID = FileName(Ind_(4)+1:end);
    ListCells{ss} = fullfile(Path2AllData,sprintf('%s_%s_SS%s_%s-%s.mat', SubjectID_local, Date,SSQ_local,TetrodeID,SSID));
    Data=load(ListCells{ss});
    SubjID{ss} = SubjectID_local;
    SNR(ss) = max(Data.QualitySSU.SNR);
    ContamInd(ss) = Data.QualitySSU.ContamInd;
    ISIViolation(ss) = Data.QualitySSU.ISIViolation;
    if (SNR(ss)>=5) && (ISIViolation(ss)<=1) && (ContamInd(ss)<=0.2)
        SSQ{ss} = 'SSSU';
    elseif (SNR(ss)>=2)
        SSQ{ss} = 'SSMU';
    else
        SSQ{ss} = 'NOISE';
    end
end

%%
SSSU = (SNR>=5) .* (ISIViolation<=1) .* (ContamInd<=0.2);
SSMU = ~SSSU .* (SNR>=2);
NOISE = SNR<2;
C = [NOISE SSSU SSMU];
fprintf('Number of single units: %d/%d, %.2f%%\n',sum(SSSU), NU,sum(SSSU)/NU*100)
fprintf('Number of multi-units: %d/%d, %.2f%%\n',sum(SSMU), NU,sum(SSMU)/NU*100)
fprintf('Number of Noise units: %d/%d, %.2f%%\n',sum(NOISE), NU,sum(NOISE)/NU*100)

% GoodCellIndices = find(contains(SSQ, 'SS'));

% C = [contains(SSQ, 'NOISE') contains(SSQ, 'SSSU') contains(SSQ, 'SSMU')];
scatter(ISIViolation, SNR,40,C,'filled')
xlabel('ISI violation (%)')
ylabel('SNR spike shape')
ContamInd(ContamInd>1)=1; %saturate the ContamInd, everything above 1 is just highly contaminated
scatter(ISIViolation,ContamInd, 40, C,'filled')
xlabel('ISI violation (%)')
ylabel('Poisson contamination Index')
%% Hierarchical clustering on KDE onset of all cells for Ba and Tr in Operant and Free sessions

% gather the data
% There are weird effect of convolution at edges so Trim data 500ms
Trim = 500;
Tstart = -5000;
GoodCellIndices = sort([find(SSSU); find(SSMU)]);
GC = length(GoodCellIndices);
KDE_onset = cell(GC,9); % first column SelfBaOp, 2nd, SelfTrOp; 3rd SelfVocOp; 4th column SelfBaFr, 5th, SelfTrFr; 6th SelfVocFr; 7th column OthersBaOp, 8th, OthersTrOp; 9th OthersVocOp;
T_onset = cell(GC,2);
Tmax = nan(GC,9);
MeanKDEBaTrOp = nan(GC,1);
StdKDEBaTrOp = nan(GC,1);
MeanKDEBaTrFr = nan(GC,1);
StdKDEBaTrFr = nan(GC,1);
MeanKDEBaTrOpFr = nan(GC,1);
StdKDEBaTrOpFr = nan(GC,1);
MeanKDEAllVocOp = nan(GC,1);
StdKDEAllVocOp = nan(GC,1);
MeanKDEAllVocFr = nan(GC,1);
StdKDEAllVocFr = nan(GC,1);
MeanKDEAllVocOpFr = nan(GC,1);
StdKDEAllVocOpFr = nan(GC,1);
OperantVocalizer = nan(GC,1);
for ss=1:GC
    fprintf(1,'File %d/%d\n',ss,GC)
    Data=load(ListCells{GoodCellIndices(ss)});
    if isfield(Data,'KDE_onset') && isfield(Data.KDE_onset, 'SelfBaOp')
        if contains(ListCells{GoodCellIndices(ss)}, '65701')
            warning('Unexpected that 65701 has vocalproduction in Operant')
            keyboard
        end
        OperantVocalizer(ss) = 1;
        Tmax(ss,1) = max(Data.KDE_onset.SelfBaOp(2,(1:(end-Trim))));
        KDE_onset{ss,1} = Data.KDE_onset.SelfBaOp(1,find(Data.KDE_onset.SelfBaOp(2,:)==(Tstart+Trim)):(end-Trim));
    end
    if isfield(Data,'KDE_onset') && isfield(Data.KDE_onset, 'SelfTrOp')
        if contains(ListCells{GoodCellIndices(ss)}, '65701')
            warning('Unexpected that 65701 has vocalproduction in Operant')
            keyboard
        end
        OperantVocalizer(ss) = 1;
        Tmax(ss,2) = max(Data.KDE_onset.SelfTrOp(2,1:(end-Trim)));
        KDE_onset{ss,2} = Data.KDE_onset.SelfTrOp(1,find(Data.KDE_onset.SelfTrOp(2,:)==(Tstart+Trim)):(end-Trim));
    end
    if isfield(Data,'KDE_onset') && isfield(Data.KDE_onset, 'SelfVocOp')
        if contains(ListCells{GoodCellIndices(ss)}, '65701')
            warning('Unexpected that 65701 has vocalproduction in Operant')
            keyboard
        end
        OperantVocalizer(ss) = 1;
        Tmax(ss,3) = max(Data.KDE_onset.SelfVocOp(2,1:(end-Trim)));
        KDE_onset{ss,3} = Data.KDE_onset.SelfVocOp(1,find(Data.KDE_onset.SelfVocOp(2,:)==(Tstart+Trim)):(end-Trim));
        MeanKDEAllVocOp(ss) = nanmean(KDE_onset{ss,3}); 
        StdKDEAllVocOp(ss) = nanstd(KDE_onset{ss,3}); 
    end
    
    if isfield(Data,'KDE_onset') && isfield(Data.KDE_onset, 'SelfBaFr')
        Tmax(ss,4) = max(Data.KDE_onset.SelfBaFr(2,1:(end-Trim)));
        KDE_onset{ss,4} = Data.KDE_onset.SelfBaFr(1,find(Data.KDE_onset.SelfBaFr(2,:)==(Tstart+Trim)):(end-Trim));
    end
    if isfield(Data,'KDE_onset') && isfield(Data.KDE_onset, 'SelfTrFr')
        Tmax(ss,5) = max(Data.KDE_onset.SelfTrFr(2,1:(end-Trim)));
        KDE_onset{ss,5} = Data.KDE_onset.SelfTrFr(1,find(Data.KDE_onset.SelfTrFr(2,:)==(Tstart+Trim)):(end-Trim));
    end
    if isfield(Data,'KDE_onset') && isfield(Data.KDE_onset, 'SelfVocFr')
        Tmax(ss,6) = max(Data.KDE_onset.SelfVocFr(2,1:(end-Trim)));
        KDE_onset{ss,6} = Data.KDE_onset.SelfVocFr(1,find(Data.KDE_onset.SelfVocFr(2,:)==(Tstart+Trim)):(end-Trim));
        MeanKDEAllVocFr(ss) = nanmean(KDE_onset{ss,6}); 
        StdKDEAllVocFr(ss) = nanstd(KDE_onset{ss,6}); 
    end
    MeanKDEBaTrFr(ss) = nanmean([KDE_onset{ss,4} KDE_onset{ss,5}]); 
    StdKDEBaTrFr(ss) = nanstd([KDE_onset{ss,4} KDE_onset{ss,5}]); 
    MeanKDEBaTrOpFr(ss) = nanmean([KDE_onset{ss,4} KDE_onset{ss,5} KDE_onset{ss,1} KDE_onset{ss,2}]); 
    StdKDEBaTrOpFr(ss) = nanstd([KDE_onset{ss,4} KDE_onset{ss,5} KDE_onset{ss,1} KDE_onset{ss,2}]);
    MeanKDEAllVocOpFr(ss) = nanmean([KDE_onset{ss,3} KDE_onset{ss,6}]); 
    StdKDEAllVocOpFr(ss) = nanstd([KDE_onset{ss,3} KDE_onset{ss,6}]); 

    if isfield(Data,'KDE_onset') && isfield(Data.KDE_onset, 'OthersBaOp')
        if contains(ListCells{GoodCellIndices(ss)}, '59834') || contains(ListCells{GoodCellIndices(ss)}, '11689')
            warning('Unexpected that 59834 or 11689 has vocal perception in Operant')
            keyboard
        end
        OperantVocalizer(ss) = 0;
        Tmax(ss,7) = max(Data.KDE_onset.OthersBaOp(2,(1:(end-Trim))));
        KDE_onset{ss,7} = Data.KDE_onset.OthersBaOp(1,find(Data.KDE_onset.OthersBaOp(2,:)==(Tstart+Trim)):(end-Trim));
    end
    if isfield(Data,'KDE_onset') && isfield(Data.KDE_onset, 'OthersTrOp')
        if contains(ListCells{GoodCellIndices(ss)}, '59834') || contains(ListCells{GoodCellIndices(ss)}, '11689')
            warning('Unexpected that 59834 or 11689 has vocal perception in Operant')
            keyboard
        end
        OperantVocalizer(ss) = 0;
        Tmax(ss,8) = max(Data.KDE_onset.OthersTrOp(2,1:(end-Trim)));
        KDE_onset{ss,8} = Data.KDE_onset.OthersTrOp(1,find(Data.KDE_onset.OthersTrOp(2,:)==(Tstart+Trim)):(end-Trim));
    end
    if isfield(Data,'KDE_onset') && isfield(Data.KDE_onset, 'OthersVocOp')
        if contains(ListCells{GoodCellIndices(ss)}, '59834') || contains(ListCells{GoodCellIndices(ss)}, '11689')
            warning('Unexpected that 59834 or 11689 has vocal perception in Operant')
            keyboard
        end
        OperantVocalizer(ss) = 0;
        Tmax(ss,9) = max(Data.KDE_onset.OthersVocOp(2,1:(end-Trim)));
        KDE_onset{ss,9} = Data.KDE_onset.OthersVocOp(1,find(Data.KDE_onset.OthersVocOp(2,:)==(Tstart+Trim)):(end-Trim));
        MeanKDEAllVocOp(ss) = nanmean(KDE_onset{ss,9}); 
        StdKDEAllVocOp(ss) = nanstd(KDE_onset{ss,9}); 
    end
    if OperantVocalizer(ss)
        MeanKDEBaTrOp(ss) = nanmean([KDE_onset{ss,1} KDE_onset{ss,2}]); 
        StdKDEBaTrOp(ss) = nanstd([KDE_onset{ss,1} KDE_onset{ss,2}]); 
    else
        MeanKDEBaTrOp(ss) = nanmean([KDE_onset{ss,7} KDE_onset{ss,8}]); 
        StdKDEBaTrOp(ss) = nanstd([KDE_onset{ss,7} KDE_onset{ss,8}]); 
    end

end
save('explore_populationSU_data.mat', 'SSQ','SNR','ContamInd', 'ISIViolation', 'SubjID','SSSU', 'SSMU', 'ListCells','GoodCellIndices', 'KDE_onset','T_onset', 'Tmax', 'MeanKDEBaTrOp', 'StdKDEBaTrOp','StdKDEBaTrFr','MeanKDEBaTrFr','MeanKDEBaTrOpFr', 'StdKDEBaTrOpFr','MeanKDEAllVocOp','StdKDEAllVocOp','MeanKDEAllVocFr','StdKDEAllVocFr', 'MeanKDEAllVocOpFr','StdKDEAllVocOpFr','OperantVocalizer')
%%
% Explore the average spike rates and get rid of non active cells?
histogram(MeanKDEAllVocOp,'BinWidth',0.1)
hold on
histogram(MeanKDEAllVocFr,'BinWidth',0.1)
legend('Operant', 'Free')
xlabel('Mean KDE All Voc (Hz)')
ylabel('# units')
hold off
histogram(MeanKDEAllVocOp,'BinWidth',0.1)
hold on
histogram(MeanKDEAllVocFr,'BinWidth',0.1)
legend('Operant', 'Free')
xlabel('Mean KDE All Voc (Hz)')
ylabel('# units')
xlim([0 5])
hold off
scatter(MeanKDEAllVocOp,MeanKDEAllVocFr, 20, 'filled')
xlabel('Mean KDE All Voc (Hz) Operant')
ylabel('Mean KDE All Voc (Hz) Free')
ActiveCells = find((MeanKDEAllVocOp>0.1) + (MeanKDEAllVocFr>0.1));
fprintf(1,'Number of active cells: %d/%d',length(ActiveCells), length(MeanKDEAllVocOp))
%%
% Trim the data of active cells in time and create a matrix of all the
% z-scored KDE Tr and Ba Op For both Hearing and vocalizing bats

BaTr_0ind = (~isnan(Tmax(:,1))+~isnan(Tmax(:,7))) .* (~isnan(Tmax(:,2))+~isnan(Tmax(:,8))).* ~isnan(MeanKDEBaTrOp).*MeanKDEAllVocOp>0.1;
BaTr_Ind = find(BaTr_0ind);
fprintf('The clustering algorithm can be performed on the data of %d/%d\n',sum(BaTr_0ind),length(ActiveCells))
TBa = length(Tstart+Trim:min([Tmax(:,1); Tmax(:,7)]));
TTr = length(Tstart+Trim:min([Tmax(:,2); Tmax(:,8)]));
KDE_onset_Mat_BaTr_ZS_noTrim = nan(sum(BaTr_0ind),TBa + TTr);
for ss=1:sum(BaTr_0ind)
    fprintf(1,'File %d/%d\n',ss,sum(BaTr_0ind))
    if OperantVocalizer(BaTr_Ind(ss))
        KDE_onset_Mat_BaTr_ZS_noTrim(ss,:) = ([KDE_onset{BaTr_Ind(ss),1}(1:TBa) KDE_onset{BaTr_Ind(ss),2}(1:TTr)]-MeanKDEBaTrOp(BaTr_Ind(ss)))/StdKDEBaTrOp(BaTr_Ind(ss));
    else
        KDE_onset_Mat_BaTr_ZS_noTrim(ss,:) = ([KDE_onset{BaTr_Ind(ss),7}(1:TBa) KDE_onset{BaTr_Ind(ss),8}(1:TTr)]-MeanKDEBaTrOp(BaTr_Ind(ss)))/StdKDEBaTrOp(BaTr_Ind(ss));
    end
end
save('explore_populationSU_data.mat', 'KDE_onset_Mat_BaTr_ZS_noTrim', 'BaTr_Ind','BaTr_0ind', '-append')
%%
% Trim the data of active cells in time and create a matrix of all the
% z-scored KDE for all vocalizations and Fr and Op

OpFr_0ind = ~isnan(Tmax(:,3)) .* ~isnan(Tmax(:,6)).* ~isnan(MeanKDEBaTrOpFr).*((MeanKDEAllVocOp>0.1) + (MeanKDEAllVocFr>0.1))>0;
OpFr_Ind = find(OpFr_0ind);
fprintf('The clustering algorithm can be performed on the data of %d/%d\n',sum(OpFr_0ind),length(ActiveCells))
TOp = length(Tstart+Trim:min(Tmax(:,3)));
TFr = length(Tstart+Trim:min(Tmax(:,6)));
KDE_onset_Mat_OpFr_ZS_noTrim = nan(sum(OpFr_0ind),TOp + TFr);
for ss=1:sum(OpFr_0ind)
    fprintf(1,'File %d/%d\n',ss,sum(OpFr_0ind))
    KDE_onset_Mat_OpFr_ZS_noTrim(ss,:) = ([KDE_onset{OpFr_Ind(ss),3}(1:TOp) KDE_onset{OpFr_Ind(ss),6}(1:TFr)]-MeanKDEBaTrOpFr(OpFr_Ind(ss)))/StdKDEBaTrOpFr(OpFr_Ind(ss));
end
%%
% Explore the number of time points with signficant (zscore>2) difference
% in spike rate
SignifTP = sum(abs(KDE_onset_Mat_OpFr_ZS_noTrim)>1.6,2);
histogram(SignifTP, 'BinWidth',10)
xlabel('Number of significant time points (ms)')
ylabel('# units')
histogram(SignifTP(logical(SignifTP)), 'BinWidth',20)
xlabel('Number of significant time points (ms)')
ylabel('# units')
fprintf(1,'%d/%d (%.2f %%) units are significant\n',sum(logical(SignifTP)),length(SignifTP),100*sum(logical(SignifTP))/length(SignifTP))
fprintf(1, 'Duration of significance: %.1f +/- %.1f ms\n',mean(SignifTP(logical(SignifTP))), std(SignifTP(logical(SignifTP)))/(sum(logical(SignifTP)))^0.5)
fprintf(1,'Minimum value %.1f ms\n',min(SignifTP(logical(SignifTP))))
fprintf(1, 'Maximum value %.1f ms\n',max(SignifTP(logical(SignifTP))))

%%
ListCellsGC = ListCells(GoodCellIndices);
ListCellsGCOpFr = ListCellsGC(OpFr_Ind);
NonSignif=find(~logical(SignifTP));
fprintf(1,'***** Checking non-significant cells ******')
figure;
for ii=1:length(NonSignif)
    clc
    set(gcf, 'Visible','on')
    [~,Filename,~]=(fileparts(ListCellsGCOpFr(NonSignif(ii))))
    fprintf(1,'%s', Filename)
    plot(KDE_onset_Mat_OpFr_ZS_noTrim(NonSignif(ii),:))
    title(sprintf('%s',Filename))
    pause()
end
%%
% Restrict the dataset to significant cells
% KDE_onset_Mat_BaTr_ZS = KDE_onset_Mat_BaTr_ZS_noTrim(logical(SignifTP),:);
% BaTr_ind = BaTr_Ind(logical(SignifTP));
%%
% Clustering based on zscored KDE Of Opeant and Free KDE
hold off
Z = linkage(KDE_onset_Mat_OpFr_ZS_noTrim,'ward','euclidean');
[D1, T1, ~] = dendrogram(Z,0, 'ColorThreshold','Default','Orientation','left');
set(D1,'LineWidth',2)
ClustSize = 2:20;
MeanSilhouette = nan(size(ClustSize));
MedianSilhouette = nan(size(ClustSize));
PercLowSilhouette = nan(size(ClustSize));
LowSi = 0.3;
for cc=1:length(ClustSize)
    T = cluster(Z,'maxclust',ClustSize(cc));
    [Si,h] = silhouette(KDE_onset_Mat_OpFr_ZS_noTrim,T, 'Euclidean');
    MeanSilhouette(cc) = mean(Si);
    MedianSilhouette(cc) = median(Si);
    PercLowSilhouette(cc) = sum(Si<LowSi)/length(Si);
end
eva = evalclusters(KDE_onset_Mat_OpFr_ZS_noTrim, 'linkage','CalinskiHarabasz','KList',1:15)
eva = evalclusters(KDE_onset_Mat_OpFr_ZS_noTrim, 'linkage','DaviesBouldin','KList',1:15)
eva = evalclusters(KDE_onset_Mat_OpFr_ZS_noTrim, 'linkage','silhouette','KList',1:15)
%%
plot(ClustSize, MeanSilhouette, 'LineWidth',2);
hold on
plot(ClustSize, MedianSilhouette, 'LineWidth',2);
xlabel('Cluster Size')
ylabel('Silhouette')
legend('Mean', 'Median')
hold off
plot(ClustSize, PercLowSilhouette, 'LineWidth',2);
ylabel('Proportion leaves with Low Silhouette')
%% According to all these metrics, the data are clearly clustered in 3
%%
T = cluster(Z,'maxclust',3);
cutoff = median([Z(end-2,3) Z(end-1,3)]);
D3=dendrogram(Z,0,'ColorThreshold',cutoff,'Labels',num2str(T),'Orientation','left');
set(D3, 'LineWidth',2)
D3_30=dendrogram(Z,30,'ColorThreshold',cutoff,'Labels',num2str(T),'Orientation','left');
set(D3_30, 'LineWidth',2)
[D3_3,T3,O3]=dendrogram(Z,3,'ColorThreshold',cutoff,'Labels',num2str(T),'Orientation','left');
set(D3_3, 'LineWidth',2)
%%
% PLot the average profil of cells under the 3 first clusters
hold off
plot(mean(KDE_onset_Mat_OpFr_ZS_noTrim(T==1,:)), 'LineWidth',2, 'Color',[0 0.4470 0.7410])
hold on
plot(mean(KDE_onset_Mat_OpFr_ZS_noTrim(T==2,:)), 'LineWidth',2, 'Color', [0.8500 0.3250 0.0980])
hold on
plot(mean(KDE_onset_Mat_OpFr_ZS_noTrim(T==3,:)), 'LineWidth',2, 'Color',[0.9290 0.6940 0.1250])
legend(sprintf('Clust1 (n=%d)',sum(T==1)), sprintf('Clust2 (n=%d)',sum(T==2)), sprintf('Clust3 (n=%d)', sum(T==3)), 'Location', 'northwest')
legend('AutoUpdate','off')

NT = size(KDE_onset_Mat_OpFr_ZS_noTrim,2);
hold on
shadedErrorBar(1:NT, mean(KDE_onset_Mat_OpFr_ZS_noTrim(T==1,:)),std(KDE_onset_Mat_OpFr_ZS_noTrim(T==1,:))./(sum(T==1))^0.5,{'-', 'Color',[0 0.4470 0.7410]})
hold on
shadedErrorBar(1:NT,mean(KDE_onset_Mat_OpFr_ZS_noTrim(T==2,:)),std(KDE_onset_Mat_OpFr_ZS_noTrim(T==2,:))./(sum(T==2))^0.5,{'-', 'Color',[0.8500 0.3250 0.0980]})
hold on
shadedErrorBar(1:NT,mean(KDE_onset_Mat_OpFr_ZS_noTrim(T==3,:)),std(KDE_onset_Mat_OpFr_ZS_noTrim(T==3,:))./(sum(T==3))^0.5,{'-', 'Color',[0.9290 0.6940 0.1250]})
ylabel('Zscore Rate')
xlabel('Time (s)')
xticks([1 -(Tstart+Trim) TOp TOp-(Tstart+Trim)])
xticklabels([(Tstart+Trim)/10^3 0 (Tstart+Trim)/10^3 0])
title('Operant               Free')
hold off
%%
% Eliminate cluster 1 and cluster again
ReclustInd = T~=1;
hold off
Z = linkage(KDE_onset_Mat_OpFr_ZS_noTrim(ReclustInd,:),'ward','euclidean');
[D1, T1, ~] = dendrogram(Z,0, 'ColorThreshold','Default','Orientation','left');
set(D1,'LineWidth',2)
ClustSize = 2:20;
MeanSilhouette = nan(size(ClustSize));
MedianSilhouette = nan(size(ClustSize));
PercLowSilhouette = nan(size(ClustSize));
LowSi = 0.3;
for cc=1:length(ClustSize)
    T_local = cluster(Z,'maxclust',ClustSize(cc));
    [Si,h] = silhouette(KDE_onset_Mat_OpFr_ZS_noTrim(ReclustInd,:),T_local, 'Euclidean');
    MeanSilhouette(cc) = mean(Si);
    MedianSilhouette(cc) = median(Si);
    PercLowSilhouette(cc) = sum(Si<LowSi)/length(Si);
end
eva = evalclusters(KDE_onset_Mat_OpFr_ZS_noTrim(ReclustInd,:), 'linkage','CalinskiHarabasz','KList',1:15)
eva = evalclusters(KDE_onset_Mat_OpFr_ZS_noTrim(ReclustInd,:), 'linkage','DaviesBouldin','KList',1:15)
eva = evalclusters(KDE_onset_Mat_OpFr_ZS_noTrim(ReclustInd,:), 'linkage','silhouette','KList',1:15)
%%
plot(ClustSize, MeanSilhouette, 'LineWidth',2);
hold on
plot(ClustSize, MedianSilhouette, 'LineWidth',2);
xlabel('Cluster Size')
ylabel('Silhouette')
legend('Mean', 'Median')
hold off
plot(ClustSize, PercLowSilhouette, 'LineWidth',2);
ylabel('Proportion leaves with Low Silhouette')
%% According to all these metrics, the data are clearly clustered in 2
%%
% Re-cluster all data around 5 clusters and investigate functional features
Z = linkage(KDE_onset_Mat_OpFr_ZS_noTrim,'ward','euclidean');
T5 = cluster(Z,'maxclust',5);
cutoff = median([Z(end-4,3) Z(end-3,3)]);
D5=dendrogram(Z,0,'ColorThreshold',cutoff,'Labels',num2str(T5),'Orientation','left');
set(D5, 'LineWidth',2)
D5_30=dendrogram(Z,30,'ColorThreshold',cutoff,'Labels',num2str(T5),'Orientation','left');
set(D5_30, 'LineWidth',2)
[D5_5,T5_d,O5]=dendrogram(Z,5,'ColorThreshold',cutoff,'Labels',num2str(T5),'Orientation','left');
set(D5_5, 'LineWidth',2)
%%
% PLot the average profil of cells under the 5 first clusters
ColClust1 = [0 0.4470 0.7410];
ColClust2 = [0.8500 0.3250 0.0980];
ColClust3 = [0.9290 0.6940 0.1250];
ColClust4 = [0.4940 0.1840 0.5560];
ColClust5 = [0.4660 0.6740 0.1880];
hold off
plot(mean(KDE_onset_Mat_OpFr_ZS_noTrim(T5==1,:)), 'LineWidth',2, 'Color',ColClust1)
hold on
plot(mean(KDE_onset_Mat_OpFr_ZS_noTrim(T5==2,:)), 'LineWidth',2, 'Color', ColClust2)
hold on
plot(mean(KDE_onset_Mat_OpFr_ZS_noTrim(T5==3,:)), 'LineWidth',2, 'Color',ColClust3)
hold on
plot(mean(KDE_onset_Mat_OpFr_ZS_noTrim(T5==4,:)), 'LineWidth',2, 'Color',ColClust4)
hold on
plot(mean(KDE_onset_Mat_OpFr_ZS_noTrim(T5==5,:)), 'LineWidth',2, 'Color',ColClust5)
legend(sprintf('Clust1 (n=%d)',sum(T5==1)), sprintf('Clust2 (n=%d)',sum(T5==2)), sprintf('Clust3 (n=%d)', sum(T5==3)),sprintf('Clust4 (n=%d)', sum(T5==4)),sprintf('Clust5 (n=%d)', sum(T5==5)), 'Location', 'northwest')
legend('AutoUpdate','off')

NT = size(KDE_onset_Mat_OpFr_ZS_noTrim,2);
hold on
shadedErrorBar(1:NT, mean(KDE_onset_Mat_OpFr_ZS_noTrim(T5==1,:)),std(KDE_onset_Mat_OpFr_ZS_noTrim(T5==1,:))./(sum(T5==1))^0.5,{'-', 'Color',ColClust1})
hold on
shadedErrorBar(1:NT,mean(KDE_onset_Mat_OpFr_ZS_noTrim(T5==2,:)),std(KDE_onset_Mat_OpFr_ZS_noTrim(T5==2,:))./(sum(T5==2))^0.5,{'-', 'Color',ColClust2})
hold on
shadedErrorBar(1:NT,mean(KDE_onset_Mat_OpFr_ZS_noTrim(T5==3,:)),std(KDE_onset_Mat_OpFr_ZS_noTrim(T5==3,:))./(sum(T5==3))^0.5,{'-', 'Color',ColClust3})
hold on
shadedErrorBar(1:NT,mean(KDE_onset_Mat_OpFr_ZS_noTrim(T5==4,:)),std(KDE_onset_Mat_OpFr_ZS_noTrim(T5==4,:))./(sum(T5==4))^0.5,{'-', 'Color',ColClust4})
hold on
shadedErrorBar(1:NT,mean(KDE_onset_Mat_OpFr_ZS_noTrim(T5==5,:)),std(KDE_onset_Mat_OpFr_ZS_noTrim(T5==5,:))./(sum(T5==5))^0.5,{'-', 'Color',ColClust5})
ylabel('Zscore Rate')
xlabel('Time (s)')
xticks([1 -(Tstart+Trim) TOp TOp-(Tstart+Trim)])
xticklabels([(Tstart+Trim)/10^3 0 (Tstart+Trim)/10^3 0])
title('Operant               Free')
hold off
%%
hold off
plot(mean(KDE_onset_Mat_OpFr_ZS_noTrim(T5==1,:)), 'LineWidth',2, 'Color',ColClust1)
hold on
plot(mean(KDE_onset_Mat_OpFr_ZS_noTrim(T5==2,:)), 'LineWidth',2, 'Color',ColClust2)
hold on
plot(mean(KDE_onset_Mat_OpFr_ZS_noTrim(T5==3,:)), 'LineWidth',2, 'Color',ColClust3)
hold on
plot(mean(KDE_onset_Mat_OpFr_ZS_noTrim(T5==4,:)), 'LineWidth',2, 'Color',ColClust4)
legend(sprintf('Clust1 (n=%d)',sum(T5==1)), sprintf('Clust2 (n=%d)',sum(T5==2)), sprintf('Clust3 (n=%d)', sum(T5==3)),sprintf('Clust4 (n=%d)', sum(T5==4)), 'Location','eastoutside')
legend('AutoUpdate','off')

NT = size(KDE_onset_Mat_OpFr_ZS_noTrim,2);
hold on
shadedErrorBar(1:NT, mean(KDE_onset_Mat_OpFr_ZS_noTrim(T5==1,:)),std(KDE_onset_Mat_OpFr_ZS_noTrim(T5==1,:))./(sum(T5==1))^0.5,{'-', 'Color',ColClust1})
hold on
shadedErrorBar(1:NT,mean(KDE_onset_Mat_OpFr_ZS_noTrim(T5==2,:)),std(KDE_onset_Mat_OpFr_ZS_noTrim(T5==2,:))./(sum(T5==2))^0.5,{'-', 'Color',ColClust2})
hold on
shadedErrorBar(1:NT,mean(KDE_onset_Mat_OpFr_ZS_noTrim(T5==3,:)),std(KDE_onset_Mat_OpFr_ZS_noTrim(T5==3,:))./(sum(T5==3))^0.5,{'-', 'Color',ColClust3})
hold on
shadedErrorBar(1:NT,mean(KDE_onset_Mat_OpFr_ZS_noTrim(T5==4,:)),std(KDE_onset_Mat_OpFr_ZS_noTrim(T5==4,:))./(sum(T5==4))^0.5,{'-', 'Color',ColClust4})
ylabel('Zscore Rate')
xlabel('Time (s)')
xticks([1 -(Tstart+Trim) TOp TOp-(Tstart+Trim)])
xticklabels([(Tstart+Trim)/10^3 0 (Tstart+Trim)/10^3 0])
title('Operant               Free')
hold off
%%
% Explore values of MI COherence with Vocal production in Operant
HDPath = '/Volumes/JulieE8T/LMCResults/';
MC = load(fullfile(HDPath,sprintf('MotorCoherence_%s_%s.mat', 'amp', 'Operant')));
ListCellsGC = ListCells(GoodCellIndices); % Select cells spike sorted as eitherMU or SU
ListCellsGCOpFr = ListCellsGC(OpFr_Ind); % Selecte cells with a minimum of 0.1Hz either during Op or Fr
% Gather data on Info
InfoOp = nan(length(ListCellsGCOpFr),3);% first column value of info, 2nd pRandSpikePer, 3rd pRandVoc
NanCount = [];
for cc=1:length(MC.CellsPath)
    Ind=find(contains(ListCellsGCOpFr, MC.CellsPath(cc).name));
    if ~isempty(Ind)
        InfoOp(Ind,1) = MC.Info(cc);
        if isnan(MC.Info(cc))
            NanCount = [NanCount Ind];
        end
        InfoOp(Ind,2) = MC.Info_pRandSpikePerm(cc);
        InfoOp(Ind,3) = MC.Info_pRandVoc(cc);
    end
end
% note that Motor coherence calculation was not run on {'/Volumes/JulieE8T/LMCResults/59834_20190630_SSS_2-150.mat'}
% Probably because of data corruption issues (I rerun all the extraction
% steps after spike sorting on 10/23/2021 because the file could not be
% opened by matlab anymore)
%%
ScatterMarkerSz=30;
MeanMarkerSize=14;
hold off
swarmchart(ones(sum(T5==1),1),InfoOp(T5==1),ScatterMarkerSz,ColClust1,'o','filled','MarkerFaceAlpha',0.5,'MarkerEdgeAlpha',0.5)
hold on
errorbar(1,nanmean(InfoOp(T5==1)),nanstd(InfoOp(T5==1))/sum(~isnan(InfoOp(T5==1)))^0.5, 'dr','MarkerSize',MeanMarkerSize,'MarkerFaceColor',ColClust1)
hold on
swarmchart(2*ones(sum(T5==2),1),InfoOp(T5==2),ScatterMarkerSz,ColClust2,'o','filled','MarkerFaceAlpha',0.5,'MarkerEdgeAlpha',0.5)
hold on
errorbar(2,nanmean(InfoOp(T5==2)),nanstd(InfoOp(T5==2))/sum(~isnan(InfoOp(T5==2)))^0.5, 'dr','MarkerSize',MeanMarkerSize,'MarkerFaceColor',ColClust2)
hold on
swarmchart(3*ones(sum(T5==3),1),InfoOp(T5==3),ScatterMarkerSz,ColClust3,'o','filled','MarkerFaceAlpha',0.5,'MarkerEdgeAlpha',0.5)
hold on
errorbar(3,nanmean(InfoOp(T5==3)),nanstd(InfoOp(T5==3))/sum(~isnan(InfoOp(T5==3)))^0.5, 'dr','MarkerSize',MeanMarkerSize,'MarkerFaceColor',ColClust3)
hold on
swarmchart(4*ones(sum(T5==4),1),InfoOp(T5==4),ScatterMarkerSz,ColClust4,'o','filled','MarkerFaceAlpha',0.5,'MarkerEdgeAlpha',0.5)
hold on
errorbar(4,nanmean(InfoOp(T5==4)),nanstd(InfoOp(T5==4))/sum(~isnan(InfoOp(T5==4)))^0.5, 'dr','MarkerSize',MeanMarkerSize,'MarkerFaceColor',ColClust4)
hold on
swarmchart(5*ones(sum(T5==5),1),InfoOp(T5==5),ScatterMarkerSz,ColClust5,'o','filled','MarkerFaceAlpha',0.5,'MarkerEdgeAlpha',0.5)
hold on
errorbar(5,nanmean(InfoOp(T5==5)),nanstd(InfoOp(T5==5))/sum(~isnan(InfoOp(T5==5)))^0.5, 'dr','MarkerSize',MeanMarkerSize,'MarkerFaceColor',ColClust5)
hold off
xlabel('Cluster #')
ylabel('Info on Motor coherence')
%% 
% The HCA is most likely highly driven by the difference in DC rate between 
% Operant and free sessions. Let's z-score per session and explore again the HCA 
% on Operant only. Instead of a z-score, treat the KDE as a pdf

% Trim the data in time and create a matrix of all the
% z-scored or pdf KDE for all vocalizations of Op. zscoring values for free
% session independantly gives weird results (out of the chart STD?! that mess up the zscore?!)

OpFr_0ind = ~isnan(Tmax(:,3)) .* ~isnan(Tmax(:,6)).* ~isnan(MeanKDEBaTrOpFr).*((MeanKDEAllVocOp>0.1) + (MeanKDEAllVocFr>0.1))>0;
OpFr_Ind = find(OpFr_0ind);
fprintf('The clustering algorithm can be performed on the data of %d/%d\n',sum(OpFr_0ind),length(ActiveCells))
TOp = length(Tstart+Trim:min(Tmax(:,3)));
% TFr = length(Tstart+Trim:min(Tmax(:,6)));
KDE_onset_Mat_Op_pdf_noTrim = nan(sum(OpFr_0ind),TOp);
% KDE_onset_Mat_Op_ZS_noTrim = nan(sum(OpFr_0ind),TOp+TFr);
for ss=1:sum(OpFr_0ind)
    fprintf(1,'File %d/%d\n',ss,sum(OpFr_0ind))
    KDEOp = KDE_onset{OpFr_Ind(ss),3}(1:TOp)./sum(KDE_onset{OpFr_Ind(ss),3}(1:TOp));
%     KDEOp = (KDE_onset{OpFr_Ind(ss),3}(1:TOp)-MeanKDEBaTrOp(OpFr_Ind(ss)))./StdKDEBaTrOp(OpFr_Ind(ss));
%     KDEFr = (KDE_onset{OpFr_Ind(ss),6}(1:TFr)-MeanKDEBaTrFr(OpFr_Ind(ss)))./StdKDEBaTrFr(OpFr_Ind(ss));
    KDE_onset_Mat_Op_pdf_noTrim(ss,:) = KDEOp;
end
%%
% Clustering based on pdf Operant KDE
hold off
Z = linkage(KDE_onset_Mat_Op_pdf_noTrim,'ward','euclidean');
[D1, T1, ~] = dendrogram(Z,0, 'ColorThreshold','Default','Orientation','left');
set(D1,'LineWidth',2)
ClustSize = 2:20;
MeanSilhouette = nan(size(ClustSize));
MedianSilhouette = nan(size(ClustSize));
PercLowSilhouette = nan(size(ClustSize));
LowSi = 0.3;
for cc=1:length(ClustSize)
    T = cluster(Z,'maxclust',ClustSize(cc));
    [Si,h] = silhouette(KDE_onset_Mat_Op_pdf_noTrim,T, 'Euclidean');
    MeanSilhouette(cc) = mean(Si);
    MedianSilhouette(cc) = median(Si);
    PercLowSilhouette(cc) = sum(Si<LowSi)/length(Si);
end
eva = evalclusters(KDE_onset_Mat_Op_pdf_noTrim, 'linkage','CalinskiHarabasz','KList',1:15)
eva = evalclusters(KDE_onset_Mat_Op_pdf_noTrim, 'linkage','DaviesBouldin','KList',1:15)
eva = evalclusters(KDE_onset_Mat_Op_pdf_noTrim, 'linkage','silhouette','KList',1:15)
%%
plot(ClustSize, MeanSilhouette, 'LineWidth',2);
hold on
plot(ClustSize, MedianSilhouette, 'LineWidth',2);
xlabel('Cluster Size')
ylabel('Silhouette')
legend('Mean', 'Median')
hold off
plot(ClustSize, PercLowSilhouette, 'LineWidth',2);
ylabel('Proportion leaves with Low Silhouette')
%% According to all these metrics, the data are clearly clustered in 2 or 7
%%
% Let's do 5 clusters (they seem to cut the data in a reasonnable way) 
T = cluster(Z,'maxclust',5);
cutoff = median([Z(end-4,3) Z(end-3,3)]);
D5=dendrogram(Z,0,'ColorThreshold',cutoff,'Labels',num2str(T),'Orientation','left');
set(D5, 'LineWidth',2)
D5_30=dendrogram(Z,30,'ColorThreshold',cutoff,'Labels',num2str(T),'Orientation','left');
set(D5_30, 'LineWidth',2)
[D5_3,T5,O5]=dendrogram(Z,5,'ColorThreshold',cutoff,'Labels',num2str(T),'Orientation','left');
set(D5_3, 'LineWidth',2)
%%
% PLot the average profil of cells under the 5 first clusters
ColClust1 = [0 0.4470 0.7410];
ColClust2 = [0.8500 0.3250 0.0980];
ColClust3 = [0.9290 0.6940 0.1250];
ColClust4 = [0.4940 0.1840 0.5560];
ColClust5 = [0.4660 0.6740 0.1880];
% ColClust6 = [0.3010 0.7450 0.9330];
hold off
plot(mean(KDE_onset_Mat_Op_pdf_noTrim(T5==1,:)), 'LineWidth',2, 'Color',ColClust1)
hold on
plot(mean(KDE_onset_Mat_Op_pdf_noTrim(T5==2,:)), 'LineWidth',2, 'Color', ColClust2)
hold on
plot(mean(KDE_onset_Mat_Op_pdf_noTrim(T5==3,:)), 'LineWidth',2, 'Color',ColClust3)
hold on
plot(mean(KDE_onset_Mat_Op_pdf_noTrim(T5==4,:)), 'LineWidth',2, 'Color',ColClust4)
hold on
plot(mean(KDE_onset_Mat_Op_pdf_noTrim(T5==5,:)), 'LineWidth',2, 'Color',ColClust5)
% hold on
% plot(mean(KDE_onset_Mat_Op_ZS_noTrim(T6==6,:)), 'LineWidth',2, 'Color',ColClust6)
% legend(sprintf('Clust1 (n=%d)',sum(T6==1)), sprintf('Clust2 (n=%d)',sum(T6==2)), sprintf('Clust3 (n=%d)', sum(T6==3)),sprintf('Clust4 (n=%d)', sum(T6==4)),sprintf('Clust5 (n=%d)', sum(T6==5)),sprintf('Clust6 (n=%d)', sum(T6==6)), 'Location', 'northwest')
legend(sprintf('Clust1 (n=%d)',sum(T6==1)), sprintf('Clust2 (n=%d)',sum(T6==2)), sprintf('Clust3 (n=%d)', sum(T6==3)),sprintf('Clust4 (n=%d)', sum(T6==4)),sprintf('Clust5 (n=%d)', sum(T6==5)), 'Location', 'northwest')
legend('AutoUpdate','off')

NT = size(KDE_onset_Mat_Op_pdf_noTrim,2);
hold on
shadedErrorBar(1:NT, mean(KDE_onset_Mat_Op_pdf_noTrim(T5==1,:)),std(KDE_onset_Mat_Op_pdf_noTrim(T5==1,:))./(sum(T5==1))^0.5,{'-', 'Color',ColClust1})
hold on
shadedErrorBar(1:NT,mean(KDE_onset_Mat_Op_pdf_noTrim(T5==2,:)),std(KDE_onset_Mat_Op_pdf_noTrim(T5==2,:))./(sum(T5==2))^0.5,{'-', 'Color',ColClust2})
hold on
shadedErrorBar(1:NT,mean(KDE_onset_Mat_Op_pdf_noTrim(T5==3,:)),std(KDE_onset_Mat_Op_pdf_noTrim(T5==3,:))./(sum(T5==3))^0.5,{'-', 'Color',ColClust3})
hold on
shadedErrorBar(1:NT,mean(KDE_onset_Mat_Op_pdf_noTrim(T5==4,:)),std(KDE_onset_Mat_Op_pdf_noTrim(T5==4,:))./(sum(T5==4))^0.5,{'-', 'Color',ColClust4})
hold on
shadedErrorBar(1:NT,mean(KDE_onset_Mat_Op_pdf_noTrim(T5==5,:)),std(KDE_onset_Mat_Op_pdf_noTrim(T5==5,:))./(sum(T5==5))^0.5,{'-', 'Color',ColClust5})
% hold on
% shadedErrorBar(1:NT,mean(KDE_onset_Mat_Op_ZS_noTrim(T6==6,:)),std(KDE_onset_Mat_Op_ZS_noTrim(T6==6,:))./(sum(T6==6))^0.5,{'-', 'Color',ColClust6})
ylabel('Rate pdf')
xlabel('Time (s)')
xticks([1 -(Tstart+Trim)])
xticklabels([(Tstart+Trim)/10^3 0])
title('Operant')
hold off
%%
ScatterMarkerSz=30;
MeanMarkerSize=14;
hold off
swarmchart(ones(sum(T5==1),1),InfoOp(T5==1),ScatterMarkerSz,ColClust1,'o','filled','MarkerFaceAlpha',0.5,'MarkerEdgeAlpha',0.5)
hold on
errorbar(1,nanmean(InfoOp(T5==1)),nanstd(InfoOp(T5==1))/sum(~isnan(InfoOp(T5==1)))^0.5, 'dr','MarkerSize',MeanMarkerSize,'MarkerFaceColor',ColClust1)
hold on
swarmchart(2*ones(sum(T5==2),1),InfoOp(T5==2),ScatterMarkerSz,ColClust2,'o','filled','MarkerFaceAlpha',0.5,'MarkerEdgeAlpha',0.5)
hold on
errorbar(2,nanmean(InfoOp(T5==2)),nanstd(InfoOp(T5==2))/sum(~isnan(InfoOp(T5==2)))^0.5, 'dr','MarkerSize',MeanMarkerSize,'MarkerFaceColor',ColClust2)
hold on
swarmchart(3*ones(sum(T5==3),1),InfoOp(T5==3),ScatterMarkerSz,ColClust3,'o','filled','MarkerFaceAlpha',0.5,'MarkerEdgeAlpha',0.5)
hold on
errorbar(3,nanmean(InfoOp(T5==3)),nanstd(InfoOp(T5==3))/sum(~isnan(InfoOp(T5==3)))^0.5, 'dr','MarkerSize',MeanMarkerSize,'MarkerFaceColor',ColClust3)
hold on
swarmchart(4*ones(sum(T5==4),1),InfoOp(T5==4),ScatterMarkerSz,ColClust4,'o','filled','MarkerFaceAlpha',0.5,'MarkerEdgeAlpha',0.5)
hold on
errorbar(4,nanmean(InfoOp(T5==4)),nanstd(InfoOp(T5==4))/sum(~isnan(InfoOp(T5==4)))^0.5, 'dr','MarkerSize',MeanMarkerSize,'MarkerFaceColor',ColClust4)
hold on
swarmchart(5*ones(sum(T5==5),1),InfoOp(T5==5),ScatterMarkerSz,ColClust5,'o','filled','MarkerFaceAlpha',0.5,'MarkerEdgeAlpha',0.5)
hold on
errorbar(5,nanmean(InfoOp(T5==5)),nanstd(InfoOp(T5==5))/sum(~isnan(InfoOp(T5==5)))^0.5, 'dr','MarkerSize',MeanMarkerSize,'MarkerFaceColor',ColClust5)
hold off
xlabel('Cluster #')
ylabel('Info on Motor coherence')
%%
% Clustering based onzscore Operant KDEof Trill and non-trill calls for
% both vocalizers and non-vocalizers
hold off
Z = linkage(KDE_onset_Mat_BaTr_ZS_noTrim,'ward','euclidean');
[D1, T1, ~] = dendrogram(Z,0, 'ColorThreshold','Default','Orientation','left');
set(D1,'LineWidth',2)
ClustSize = 2:20;
MeanSilhouette = nan(size(ClustSize));
MedianSilhouette = nan(size(ClustSize));
PercLowSilhouette = nan(size(ClustSize));
LowSi = 0.3;
for cc=1:length(ClustSize)
    T = cluster(Z,'maxclust',ClustSize(cc));
    [Si,h] = silhouette(KDE_onset_Mat_BaTr_ZS_noTrim,T, 'Euclidean');
    MeanSilhouette(cc) = mean(Si);
    MedianSilhouette(cc) = median(Si);
    PercLowSilhouette(cc) = sum(Si<LowSi)/length(Si);
end
eva = evalclusters(KDE_onset_Mat_BaTr_ZS_noTrim, 'linkage','CalinskiHarabasz','KList',1:15)
eva = evalclusters(KDE_onset_Mat_BaTr_ZS_noTrim, 'linkage','DaviesBouldin','KList',1:15)
eva = evalclusters(KDE_onset_Mat_BaTr_ZS_noTrim, 'linkage','silhouette','KList',1:15)
%%
plot(ClustSize, MeanSilhouette, 'LineWidth',2);
hold on
plot(ClustSize, MedianSilhouette, 'LineWidth',2);
xlabel('Cluster Size')
ylabel('Silhouette')
legend('Mean', 'Median')
hold off
plot(ClustSize, PercLowSilhouette, 'LineWidth',2);
ylabel('Proportion leaves with Low Silhouette')
%% According to all these metrics, the data are clearly clustered in 3
%%
% Let's do 6 clusters (they seem to cut the data in a reasonnable way) 
T = cluster(Z,'maxclust',6);
cutoff = median([Z(end-5,3) Z(end-4,3)]);
D6=dendrogram(Z,0,'ColorThreshold',cutoff,'Labels',num2str(T),'Orientation','left');
set(D6, 'LineWidth',2)
D6_30=dendrogram(Z,30,'ColorThreshold',cutoff,'Labels',num2str(T),'Orientation','left');
set(D6_30, 'LineWidth',2)
[D6_3,T6,O6]=dendrogram(Z,6,'ColorThreshold',cutoff,'Labels',num2str(T),'Orientation','left');
set(D6_3, 'LineWidth',2)
%%
% PLot the average profil of cells under the 6 first clusters
OV_cells = OperantVocalizer(BaTr_0ind);
POV_cells = sum(OV_cells)/length(OV_cells);
ColClust1 = [0 0.4470 0.7410];
ColClust2 = [0.8500 0.3250 0.0980];
ColClust3 = [0.9290 0.6940 0.1250];
ColClust4 = [0.4940 0.1840 0.5560];
ColClust5 = [0.4660 0.6740 0.1880];
ColClust6 = [0.3010 0.7450 0.9330];
hold off
plot(mean(KDE_onset_Mat_BaTr_ZS_noTrim(T6==1,:)), 'LineWidth',2, 'Color',ColClust1)
hold on
plot(mean(KDE_onset_Mat_BaTr_ZS_noTrim(T6==2,:)), 'LineWidth',2, 'Color', ColClust2)
hold on
plot(mean(KDE_onset_Mat_BaTr_ZS_noTrim(T6==3,:)), 'LineWidth',2, 'Color',ColClust3)
hold on
plot(mean(KDE_onset_Mat_BaTr_ZS_noTrim(T6==4,:)), 'LineWidth',2, 'Color',ColClust4)
hold on
plot(mean(KDE_onset_Mat_BaTr_ZS_noTrim(T6==5,:)), 'LineWidth',2, 'Color',ColClust5)
hold on
plot(mean(KDE_onset_Mat_BaTr_ZS_noTrim(T6==6,:)), 'LineWidth',2, 'Color',ColClust6)
legend(sprintf('Clust1 (n=%d %.2fV)',sum(T6==1),sum(OV_cells(T6==1))/sum(T6==1)-POV_cells), sprintf('Clust2 (n=%d %.2fV)',sum(T6==2),sum(OV_cells(T6==2))/sum(T6==2)-POV_cells), sprintf('Clust3 (n=%d %.2fV)', sum(T6==3),sum(OV_cells(T6==3))/sum(T6==3)-POV_cells),sprintf('Clust4 (n=%d %.2fV)', sum(T6==4),sum(OV_cells(T6==4))/sum(T6==4)-POV_cells),sprintf('Clust5 (n=%d %.2fV)', sum(T6==5),sum(OV_cells(T6==5))/sum(T6==5)-POV_cells),sprintf('Clust6 (n=%d %.2fV)', sum(T6==6),sum(OV_cells(T6==6))/sum(T6==6)-POV_cells), 'Location', 'northoutside')
% legend(sprintf('Clust1 (n=%d)',sum(T6==1)), sprintf('Clust2 (n=%d)',sum(T6==2)), sprintf('Clust3 (n=%d)', sum(T6==3)),sprintf('Clust4 (n=%d)', sum(T6==4)),sprintf('Clust5 (n=%d)', sum(T6==5)), 'Location', 'northwest')
legend('AutoUpdate','off')

NT = size(KDE_onset_Mat_BaTr_ZS_noTrim,2);
hold on
shadedErrorBar(1:NT, mean(KDE_onset_Mat_BaTr_ZS_noTrim(T6==1,:)),std(KDE_onset_Mat_BaTr_ZS_noTrim(T6==1,:))./(sum(T6==1))^0.5,{'-', 'Color',ColClust1})
hold on
shadedErrorBar(1:NT,mean(KDE_onset_Mat_BaTr_ZS_noTrim(T6==2,:)),std(KDE_onset_Mat_BaTr_ZS_noTrim(T6==2,:))./(sum(T6==2))^0.5,{'-', 'Color',ColClust2})
hold on
shadedErrorBar(1:NT,mean(KDE_onset_Mat_BaTr_ZS_noTrim(T6==3,:)),std(KDE_onset_Mat_BaTr_ZS_noTrim(T6==3,:))./(sum(T6==3))^0.5,{'-', 'Color',ColClust3})
hold on
shadedErrorBar(1:NT,mean(KDE_onset_Mat_BaTr_ZS_noTrim(T6==4,:)),std(KDE_onset_Mat_BaTr_ZS_noTrim(T6==4,:))./(sum(T6==4))^0.5,{'-', 'Color',ColClust4})
hold on
shadedErrorBar(1:NT,mean(KDE_onset_Mat_BaTr_ZS_noTrim(T6==5,:)),std(KDE_onset_Mat_BaTr_ZS_noTrim(T6==5,:))./(sum(T6==5))^0.5,{'-', 'Color',ColClust5})
hold on
shadedErrorBar(1:NT,mean(KDE_onset_Mat_BaTr_ZS_noTrim(T6==6,:)),std(KDE_onset_Mat_BaTr_ZS_noTrim(T6==6,:))./(sum(T6==6))^0.5,{'-', 'Color',ColClust6})
ylabel('Z Rate')
xlabel('Time (s)')
xticks([1 -(Tstart+Trim)])
xticklabels([(Tstart+Trim)/10^3 0])
title('Operant')
hold off
%% 
% Let's try a PCA on the ZS

% run PCA on the ZS of the operant KDE
[PC,Score,~, ~, VarExpl,~] = pca(KDE_onset_Mat_BaTr_ZS_noTrim);
%%
% Plot the cumulative explained variance as a function of # PCs
hold off
clf
plot(cumsum(VarExpl), 'LineWidth',2);xlabel('#PC');ylabel('Proportion variance explained by PCA)'); xlim([0 30])
title('PCA on KDE of Trill and non-Trill jointly fed')
% Plot the first PC shapes
plot(PC(:,1), 'LineWidth',2);hold on;plot(PC(:,2), 'LineWidth',2);plot(PC(:,3), 'LineWidth',2);plot(PC(:,4), 'LineWidth',2);plot(PC(:,5), 'LineWidth',2);plot(PC(:,6), 'LineWidth',2);plot(PC(:,7), 'LineWidth',2);plot(PC(:,8), 'LineWidth',2);plot(PC(:,9), 'LineWidth',2);plot(PC(:,10), 'LineWidth',2);legend('PC1', 'PC2','PC3', 'PC4', 'PC5', 'PC6','PC7','PC8','PC9','PC10', 'Location', 'EastOutside'); ylabel('PCA coefficients');xlabel('Time (s)');xticks([1 -(Tstart+Trim)]);xticklabels([(Tstart+Trim)/10^3 0]);title('PCA on KDE of Trill and non-Trill jointly fed')
hold off
%%
% Plot swarmplots of PC weights (scores) with color coded if a cell is from a
% vocalizer or listener
OV_cells = logical(OperantVocalizer(BaTr_0ind)); % Vocalizer cels=1
ColPC = get(groot, 'DefaultAxesColorOrder');
ScatterMarkerSz=30;
MeanMarkerSize=14;
NPC=20;
hold off
for n=1:NPC
    swarmchart((3*n-1)*ones(sum(OV_cells),1),Score(OV_cells,n),ScatterMarkerSz,ColPC(2,:),'o','filled','MarkerFaceAlpha',0.5,'MarkerEdgeAlpha',0.5)
    hold on
    swarmchart((3*n)*ones(sum(~OV_cells),1),Score(~OV_cells,n),ScatterMarkerSz,ColPC(1,:),'o','filled','MarkerFaceAlpha',0.5,'MarkerEdgeAlpha',0.5)
    hold on
    if n==1
        legend({'Vocalizer', 'Listener'})
        legend('AutoUpdate','off')
    end
    errorbar((3*n-1),nanmean(Score(OV_cells,n)),nanstd(Score(OV_cells,n))/sum(OV_cells)^0.5, 'dk','MarkerSize',MeanMarkerSize,'MarkerFaceColor',ColPC(2,:))
    hold on
    errorbar((3*n),nanmean(Score(~OV_cells,n)),nanstd(Score(~OV_cells,n))/sum(~OV_cells)^0.5, 'dk','MarkerSize',MeanMarkerSize,'MarkerFaceColor',ColPC(1,:))
    hold on
end
set(gca, 'XTick', 3*(1:NPC)-1, 'XTickLabel',1:NPC)
xlabel('PC #')
ylabel('PC score')
title('Weights of PC compomenets for each cell')
%% 
% Let's try a PCA on the ZS but feeding independently BA and Tr

% run PCA on the ZS of the operant KDE
[PC,Score,~, ~, VarExpl,~] = pca([KDE_onset_Mat_BaTr_ZS_noTrim(:,1:TBa); KDE_onset_Mat_BaTr_ZS_noTrim(:,TBa+(1:TBa))]);
%%
% Plot the cumulative explained variance as a function of # PCs
hold off
clf
plot(cumsum(VarExpl), 'LineWidth',2);xlabel('#PC');ylabel('Proportion variance explained by PCA)'); xlim([0 30])
title('PCA on KDE of Trill and non-Trill separately fed')
% Plot the first PC shapes
plot(PC(:,1), 'LineWidth',2);hold on;plot(PC(:,2), 'LineWidth',2);plot(PC(:,3), 'LineWidth',2);plot(PC(:,4), 'LineWidth',2);plot(PC(:,5), 'LineWidth',2);plot(PC(:,6), 'LineWidth',2);plot(PC(:,7), 'LineWidth',2);plot(PC(:,8), 'LineWidth',2);plot(PC(:,9), 'LineWidth',2);plot(PC(:,10), 'LineWidth',2);legend('PC1', 'PC2','PC3', 'PC4', 'PC5', 'PC6','PC7','PC8','PC9','PC10', 'Location', 'EastOutside'); ylabel('PCA coefficients');xlabel('Time (s)');xticks([1 -(Tstart+Trim)]);xticklabels([(Tstart+Trim)/10^3 0]);title('PCA on KDE of Trill and non-Trill separately fed')
hold off
%%
% Plot swarmplots of PC weights (scores) with color coded if a cell is from a
% vocalizer or listener
NC = size(KDE_onset_Mat_BaTr_ZS_noTrim,1);
OV_cells = repmat(logical(OperantVocalizer(BaTr_0ind)),2,1); % Vocalizer cels=1
OnT_cells = logical([ones(NC,1); zeros(NC,1)]); % Mesh on =1 <-> NonTrills=1
OVT_cells = logical(OV_cells .* (~OnT_cells));
OVnT_cells = logical(OV_cells .* OnT_cells);
OLT_cells = logical((~OV_cells) .* (~OnT_cells));
OLnT_cells = logical((~OV_cells) .* OnT_cells);
ColPC = get(groot, 'DefaultAxesColorOrder');
ScatterMarkerSz=30;
MeanMarkerSize=14;
NPC=15;
LMEpValVL = nan(NPC,1);
LMEpValTnT = nan(NPC,1);
LMEpValnull = nan(NPC,1);
LMEpValInt = nan(NPC,1);
hold off
for n=1:NPC
    swarmchart((5*n-3)*ones(sum(OVT_cells),1),Score(OVT_cells,n),ScatterMarkerSz,ColPC(2,:),'o','filled','MarkerFaceAlpha',0.5,'MarkerEdgeAlpha',0.5)
    hold on
    swarmchart((5*n-2)*ones(sum(OLT_cells),1),Score(OLT_cells,n),ScatterMarkerSz,ColPC(1,:),'o','filled','MarkerFaceAlpha',0.5,'MarkerEdgeAlpha',0.5)
    hold on
    swarmchart((5*n-1)*ones(sum(OVnT_cells),1),Score(OVnT_cells,n),ScatterMarkerSz,ColPC(3,:),'o','filled','MarkerFaceAlpha',0.5,'MarkerEdgeAlpha',0.5)
    hold on
    swarmchart((5*n)*ones(sum(OLnT_cells),1),Score(OLnT_cells,n),ScatterMarkerSz,ColPC(5,:),'o','filled','MarkerFaceAlpha',0.5,'MarkerEdgeAlpha',0.5)
    hold on
    if n==1
        legend({'Vocalizer Trills', 'Listener Trills', 'Vocalizer non-Trills', 'Listener non-Trills'})
        legend('AutoUpdate','off')
    end
    errorbar((5*n-3),nanmean(Score(OVT_cells,n)),nanstd(Score(OVT_cells,n))/sum(OVT_cells)^0.5, 'dk','MarkerSize',MeanMarkerSize,'MarkerFaceColor',ColPC(2,:))
    hold on
    errorbar((5*n-2),nanmean(Score(OLT_cells,n)),nanstd(Score(OLT_cells,n))/sum(OLT_cells)^0.5, 'dk','MarkerSize',MeanMarkerSize,'MarkerFaceColor',ColPC(1,:))
    hold on
    errorbar((5*n-1),nanmean(Score(OVnT_cells,n)),nanstd(Score(OVnT_cells,n))/sum(OVnT_cells)^0.5, 'dk','MarkerSize',MeanMarkerSize,'MarkerFaceColor',ColPC(3,:))
    hold on
    errorbar((5*n),nanmean(Score(OLnT_cells,n)),nanstd(Score(OLnT_cells,n))/sum(OLnT_cells)^0.5, 'dk','MarkerSize',MeanMarkerSize,'MarkerFaceColor',ColPC(5,:))
    hold on
    Tbl =  table(Score(:,n), OV_cells, OnT_cells,[1:NC 1:NC]', 'VariableNames', {'PCScore', 'VorL','TorNT','CellID'});
    lmefull = fitlme(Tbl, 'PCScore~VorL*TorNT+(1|CellID)');
    lmeInt = fitlme(Tbl, 'PCScore~VorL+TorNT+(1|CellID)');
    lmeVL = fitlme(Tbl, 'PCScore~TorNT+(1|CellID)');
    lmeTnT = fitlme(Tbl, 'PCScore~VorL+(1|CellID)');
    lmenull = fitlme(Tbl, 'PCScore~1+(1|CellID)');
    TestLMEnull=compare(lmenull, lmefull);
    TestLMEVL = compare(lmeVL,lmefull);
    TestLMETnT = compare(lmeTnT,lmefull);
    TestLMEInt = compare(lmeInt, lmefull);
    LMEpValVL(n) = TestLMEVL.pValue(2);
    LMEpValnull(n) = TestLMEnull.pValue(2);
    LMEpValTnT(n) = TestLMETnT.pValue(2);
    LMEpValInt(n) = TestLMEInt.pValue(2);
    if LMEpValVL(n)<0.01
        plot((5*n-3), 125,'r*','MarkerSize',15);
    end
    if LMEpValInt(n)<0.01
        plot((5*n-2), 125,'g*','MarkerSize',15);
    end
    if LMEpValTnT(n)<0.01
        plot((5*n-1), 125,'b*','MarkerSize',15);
    end
    if LMEpValnull(n)<0.01
        plot((5*n-1.5), 140,'k*','MarkerSize',15);
    end


end
set(gca, 'XTick', 5*(1:NPC)-1, 'XTickLabel',1:NPC)
xlabel('PC #')
ylabel('PC score')
title('Weights of PC compomenets for each cell response')
%%
% Plot the PC shapes significant for the effect of Vocalizer/Listner in
% linear models
PCSig = find(LMEpValVL<0.01);
hold off
figure()
for n=1:length(PCSig)
    plot(PC(:,PCSig(n)), 'LineWidth',2, 'DisplayName',sprintf('PC%d',PCSig(n)) );
    hold on;
end
ylabel('PCA coefficients significantly different between L and V');
xlabel('Time (s)');
xticks([1 -(Tstart+Trim)]);xticklabels([(Tstart+Trim)/10^3 0]);
title('PCA on KDE of Trill and non-Trill separately fed')
hold off
%%
% Now we want to model the distribution of responses in the PC space for
% listener neurons
% first let's plot the scatters of that distribution

figure()
scatter(Score(OLT_cells,PCSig(1)),Score(OLT_cells,PCSig(2)),'ro', 'filled')
hold on
scatter(Score(OLnT_cells,PCSig(1)),Score(OLnT_cells,PCSig(2)), 'bo', 'filled')
legend({'Trill', 'non-Trill'})
xlabel(sprintf('PC%d',PCSig(1)))
ylabel(sprintf('PC%d',PCSig(2)))
hold off
scatter(Score(OLT_cells,PCSig(1)),Score(OLT_cells,PCSig(3)),'ro', 'filled')
hold on
scatter(Score(OLnT_cells,PCSig(1)),Score(OLnT_cells,PCSig(3)), 'bo', 'filled')
legend({'Trill', 'non-Trill'})
xlabel(sprintf('PC%d',PCSig(1)))
ylabel(sprintf('PC%d',PCSig(3)))
hold off
scatter(Score(OLT_cells,PCSig(1)),Score(OLT_cells,PCSig(4)),'ro', 'filled')
hold on
scatter(Score(OLnT_cells,PCSig(1)),Score(OLnT_cells,PCSig(4)), 'bo', 'filled')
legend({'Trill', 'non-Trill'})
xlabel(sprintf('PC%d',PCSig(1)))
ylabel(sprintf('PC%d',PCSig(4)))

hold off
%%
% Now fit with a Gaussian Mixture model, fin dthe best number of components
AIC = zeros(1,4);
GMM_L = cell(1,4);
options = statset('MaxIter',500);
for k = 1:4
    GMM_L{k} = fitgmdist(Score(~OV_cells,PCSig),k,'Options',options);
    AIC(k)= GMM_L{k}.AIC;
end
figure
plot(AIC)
xlabel('# components of GMM')
ylabel('AIC')
[minAIC,numComponents] = min(AIC);
numComponents

% 
% gmPDF = @(x,y) arrayfun(@(x0,y0) pdf(GMM_L,[x0 y0]),x,y);
% g = gca;
% fcontour(gmPDF,[g.XLim g.YLim])
% title('{\bf Scatter Plot and Fitted Gaussian Mixture Contours}')

%%
% Let's find the vocalizer neurons that significantly diverge from the
% distribution of listener cells in the PC space
k=2;
PDF_OV=pdf(GMM_L{k},Score(OV_cells,PCSig))
%% 
% Let's try a PCA on the pdf

% run PCA on the pdf of the operant KDE
[PC,Score,~, ~, VarExpl,~] = pca(KDE_onset_Mat_Op_pdf_noTrim);
%%
% Plot the cumulative explained variance as a function of # PCs
plot(cumsum(VarExpl), 'LineWidth',2);xlabel('#PC');ylabel('Proportion variance explained by PCA)'); xlim([0 15])
% Plot the first PC shapes
plot(PC(:,1), 'LineWidth',2);hold on;plot(PC(:,2), 'LineWidth',2);plot(PC(:,3), 'LineWidth',2);plot(PC(:,4), 'LineWidth',2);plot(PC(:,5), 'LineWidth',2);plot(PC(:,6), 'LineWidth',2);plot(PC(:,7), 'LineWidth',2);plot(PC(:,8), 'LineWidth',2);plot(PC(:,9), 'LineWidth',2);plot(PC(:,10), 'LineWidth',2);legend('PC1', 'PC2','PC3', 'PC4', 'PC5', 'PC6','PC7','PC8','PC9','PC10', 'Location', 'EastOutside'); ylabel('PCA coefficients');xlabel('Time (s)');xticks([1 -(Tstart+Trim)]);xticklabels([(Tstart+Trim)/10^3 0])
hold off
%%
% Look for each PC the PCA Coefficient weighted amount of info explained on average
ColPC = get(groot, 'DefaultAxesColorOrder');
ScatterMarkerSz=30;
MeanMarkerSize=14;
hold off
NC = size(KDE_onset_Mat_Op_pdf_noTrim,1);
hold on
n=1;
swarmchart(n*ones(NC,1),InfoOp(:,1).*Score(:,n),ScatterMarkerSz,ColPC(n,:),'o','filled','MarkerFaceAlpha',0.5,'MarkerEdgeAlpha',0.5)
hold on
errorbar(n,nanmean(InfoOp(:,1).*Score(:,n)),nanstd(InfoOp(:,1).*Score(:,n))/sum(~isnan(InfoOp(:,1).*Score(:,n)))^0.5, 'dk','MarkerSize',MeanMarkerSize,'MarkerFaceColor',ColPC(n,:))
hold on
n=2;
swarmchart(n*ones(NC,1),InfoOp(:,1).*Score(:,n),ScatterMarkerSz,ColPC(n,:),'o','filled','MarkerFaceAlpha',0.5,'MarkerEdgeAlpha',0.5)
hold on
errorbar(n,nanmean(InfoOp(:,1).*Score(:,n)),nanstd(InfoOp(:,1).*Score(:,n))/sum(~isnan(InfoOp(:,1).*Score(:,n)))^0.5, 'dk','MarkerSize',MeanMarkerSize,'MarkerFaceColor',ColPC(n,:))
hold on
n=3;
swarmchart(n*ones(NC,1),InfoOp(:,1).*Score(:,n),ScatterMarkerSz,ColPC(n,:),'o','filled','MarkerFaceAlpha',0.5,'MarkerEdgeAlpha',0.5)
hold on
errorbar(n,nanmean(InfoOp(:,1).*Score(:,n)),nanstd(InfoOp(:,1).*Score(:,n))/sum(~isnan(InfoOp(:,1).*Score(:,n)))^0.5, 'dk','MarkerSize',MeanMarkerSize,'MarkerFaceColor',ColPC(n,:))
n=4;
hold on
swarmchart(n*ones(NC,1),InfoOp(:,1).*Score(:,n),ScatterMarkerSz,ColPC(n,:),'o','filled','MarkerFaceAlpha',0.5,'MarkerEdgeAlpha',0.5)
hold on
errorbar(n,nanmean(InfoOp(:,1).*Score(:,n)),nanstd(InfoOp(:,1).*Score(:,n))/sum(~isnan(InfoOp(:,1).*Score(:,n)))^0.5, 'dk','MarkerSize',MeanMarkerSize,'MarkerFaceColor',ColPC(n,:))
n=5;
hold on
swarmchart(n*ones(NC,1),InfoOp(:,1).*Score(:,n),ScatterMarkerSz,ColPC(n,:),'o','filled','MarkerFaceAlpha',0.5,'MarkerEdgeAlpha',0.5)
hold on
errorbar(n,nanmean(InfoOp(:,1).*Score(:,n)),nanstd(InfoOp(:,1).*Score(:,n))/sum(~isnan(InfoOp(:,1).*Score(:,n)))^0.5, 'dk','MarkerSize',MeanMarkerSize,'MarkerFaceColor',ColPC(n,:))
n=6;
hold on
swarmchart(n*ones(NC,1),InfoOp(:,1).*Score(:,n),ScatterMarkerSz,ColPC(n,:),'o','filled','MarkerFaceAlpha',0.5,'MarkerEdgeAlpha',0.5)
hold on
errorbar(n,nanmean(InfoOp(:,1).*Score(:,n)),nanstd(InfoOp(:,1).*Score(:,n))/sum(~isnan(InfoOp(:,1).*Score(:,n)))^0.5, 'dk','MarkerSize',MeanMarkerSize,'MarkerFaceColor',ColPC(n,:))
n=7;
hold on
swarmchart(n*ones(NC,1),InfoOp(:,1).*Score(:,n),ScatterMarkerSz,ColPC(n,:),'o','filled','MarkerFaceAlpha',0.5,'MarkerEdgeAlpha',0.5)
hold on
errorbar(n,nanmean(InfoOp(:,1).*Score(:,n)),nanstd(InfoOp(:,1).*Score(:,n))/sum(~isnan(InfoOp(:,1).*Score(:,n)))^0.5, 'dk','MarkerSize',MeanMarkerSize,'MarkerFaceColor',ColPC(n,:))
hold off
xlabel('PC #')
ylabel('Info on Motor coherence')
%%
% what is the average score of cells that have the highest info values
[~,IndInfo] = sort(InfoOp(:,1), 'descend');
Nan_0 = ~isnan(InfoOp(IndInfo,1));
imagesc(Score(IndInfo(Nan_0),(1:10)))
colormap('copper')
ylabel('Cells classified by decreasing value of MI coherence voc Production')
xlabel('PC#')
title('PCA Score')
%% 
% Plot the average spike rate for each cluster

CLim01 = 1;
if CLim01
    CLim = [-3 3];
end
% cluster 1
Clust=1;
IndSSU = intersect(GoodCellIndices(BaTr_ind(T==Clust)), find(SSSU));
IndSMU = intersect(GoodCellIndices(BaTr_ind(T==Clust)), find(SSMU));
fprintf(1,'**** Cluster %d *****\n%d units, %d single units, %d multi-units\n', Clust, sum(T==Clust),length(IndSSU),length(IndSMU))
for ii=1:length(IndSSU)
    fprintf('Single Unit: %s\n',ListSSU(IndSSU(ii)).name)
end
for ii=1:length(IndSMU)
    fprintf('Multi Unit: %s\n',ListSSU(IndSMU(ii)).name)
end
fprintf(1,' Plot ZS data Cluster %d \n', Clust)
imagesc(KDE_onset_Mat_BaTr_ZS(T==Clust,:))
if CLim01
    caxis(CLim)
else
    CLim = caxis;
end
colorbar()
colormap('cool')
hold on
% delimiting Barks from Trills
line(TBa*ones(2,1), [-1 sum(T==Clust)+1],'Color', 'w', 'LineWidth',2)
hold on
% Barks onset
line([-Tstart -Tstart], [0 sum(T==Clust)],'Color','y','LineStyle','--', 'LineWidth',2)
hold on
% Trills onset
line((-Tstart + TBa)*ones(2,1), [0 sum(T==Clust)],'Color','y','LineStyle','--', 'LineWidth',2)
ylabel('Units')
xlabel('Time (s)')
xticks([1 -Tstart TBa TBa-Tstart])
xticklabels([Tstart/10^3 0 Tstart/10^3 0])
title('Barks               Trills')
hold off

plot(mean(KDE_onset_Mat_BaTr_ZS(T==Clust,:)), 'k-', 'LineWidth',2)
xlim([0 size(KDE_onset_Mat_BaTr_ZS,2)])
xlabel('Time (s)')
xticks([1 -Tstart TBa TBa-Tstart])
xticklabels([Tstart/10^3 0 Tstart/10^3 0])
hold on
% Barks onset
line([-Tstart -Tstart], CLim,'Color','r','LineStyle','--', 'LineWidth',2)
hold on
% Trills onset
line((-Tstart + TBa)*ones(2,1), CLim,'Color','r','LineStyle','--', 'LineWidth',2)
ylabel('z-scored rate')
title('Barks                       Trills')
hold off


% cluster 2 good example: 0612_SSS_1-81
Clust=2;
IndSSU = intersect(GoodCellIndices(BaTr_ind(T==Clust)), find(SSSU));
IndSMU = intersect(GoodCellIndices(BaTr_ind(T==Clust)), find(SSMU));
fprintf(1,'**** Cluster %d *****\n%d units, %d single units, %d multi-units\n', Clust, sum(T==Clust),length(IndSSU),length(IndSMU))
for ii=1:length(IndSSU)
    fprintf('Single Unit: %s\n',ListSSU(IndSSU(ii)).name)
end
for ii=1:length(IndSMU)
    fprintf('Multi Unit: %s\n',ListSSU(IndSMU(ii)).name)
end
fprintf(1,' Plot ZS data Cluster %d \n', Clust)
imagesc(KDE_onset_Mat_BaTr_ZS(T==Clust,:))
if CLim01
    caxis(CLim)
else
    CLim = caxis;
end
colorbar()
colormap('cool')
hold on
% delimiting Barks from Trills
line(TBa*ones(2,1), [-1 sum(T==Clust)+1],'Color', 'w', 'LineWidth',2)
hold on
% Barks onset
line([-Tstart -Tstart], [0 sum(T==Clust)],'Color','y','LineStyle','--', 'LineWidth',2)
hold on
% Trills onset
line((-Tstart + TBa)*ones(2,1), [0 sum(T==Clust)],'Color','y','LineStyle','--', 'LineWidth',2)
ylabel('Units')
xlabel('Time (s)')
xticks([1 -Tstart TBa TBa-Tstart])
xticklabels([Tstart/10^3 0 Tstart/10^3 0])
title('Barks               Trills')
hold off

plot(mean(KDE_onset_Mat_BaTr_ZS(T==Clust,:)), 'k-', 'LineWidth',2)
xlim([0 size(KDE_onset_Mat_BaTr_ZS,2)])
xlabel('Time (s)')
xticks([1 -Tstart TBa TBa-Tstart])
xticklabels([Tstart/10^3 0 Tstart/10^3 0])
hold on
% Barks onset
line([-Tstart -Tstart], CLim,'Color','r','LineStyle','--', 'LineWidth',2)
hold on
% Trills onset
line((-Tstart + TBa)*ones(2,1), CLim,'Color','r','LineStyle','--', 'LineWidth',2)
ylabel('z-scored rate')
title('Barks                       Trills')
hold off

% cluster 3 good example 0620_SSS_3_131
Clust=3;
IndSSU = intersect(GoodCellIndices(BaTr_ind(T==Clust)), find(SSSU));
IndSMU = intersect(GoodCellIndices(BaTr_ind(T==Clust)), find(SSMU));
fprintf(1,'**** Cluster %d *****\n%d units, %d single units, %d multi-units\n', Clust, sum(T==Clust),length(IndSSU),length(IndSMU))
for ii=1:length(IndSSU)
    fprintf('Single Unit: %s\n',ListSSU(IndSSU(ii)).name)
end
for ii=1:length(IndSMU)
    fprintf('Multi Unit: %s\n',ListSSU(IndSMU(ii)).name)
end
fprintf(1,' Plot ZS data Cluster %d \n', Clust)
imagesc(KDE_onset_Mat_BaTr_ZS(T==Clust,:))
if CLim01
    caxis(CLim)
else
    CLim = caxis;
end
colorbar()
colormap('cool')
hold on
% delimiting Barks from Trills
line(TBa*ones(2,1), [-1 sum(T==Clust)+1],'Color', 'w', 'LineWidth',2)
hold on
% Barks onset
line([-Tstart -Tstart], [0 sum(T==Clust)],'Color','y','LineStyle','--', 'LineWidth',2)
hold on
% Trills onset
line((-Tstart + TBa)*ones(2,1), [0 sum(T==Clust)],'Color','y','LineStyle','--', 'LineWidth',2)
ylabel('Units')
xlabel('Time (s)')
xticks([1 -Tstart TBa TBa-Tstart])
xticklabels([Tstart/10^3 0 Tstart/10^3 0])
title('Barks               Trills')
hold off

plot(mean(KDE_onset_Mat_BaTr_ZS(T==Clust,:)), 'k-', 'LineWidth',2)
xlim([0 size(KDE_onset_Mat_BaTr_ZS,2)])
xlabel('Time (s)')
xticks([1 -Tstart TBa TBa-Tstart])
xticklabels([Tstart/10^3 0 Tstart/10^3 0])
hold on
% Barks onset
line([-Tstart -Tstart], CLim,'Color','r','LineStyle','--', 'LineWidth',2)
hold on
% Trills onset
line((-Tstart + TBa)*ones(2,1), CLim,'Color','r','LineStyle','--', 'LineWidth',2)
ylabel('z-scored rate')
title('Barks                       Trills')
hold off

% cluster 4
Clust=4;
IndSSU = intersect(GoodCellIndices(BaTr_ind(T==Clust)), find(SSSU));
IndSMU = intersect(GoodCellIndices(BaTr_ind(T==Clust)), find(SSMU));
fprintf(1,'**** Cluster %d *****\n%d units, %d single units, %d multi-units\n', Clust, sum(T==Clust),length(IndSSU),length(IndSMU))
for ii=1:length(IndSSU)
    fprintf('Single Unit: %s\n',ListSSU(IndSSU(ii)).name)
end
for ii=1:length(IndSMU)
    fprintf('Multi Unit: %s\n',ListSSU(IndSMU(ii)).name)
end
fprintf(1,' Plot ZS data Cluster %d \n', Clust)
imagesc(KDE_onset_Mat_BaTr_ZS(T==Clust,:))
if CLim01
    caxis(CLim)
else
    CLim = caxis;
end
colorbar()
colormap('cool')
hold on
% delimiting Barks from Trills
line(TBa*ones(2,1), [-1 sum(T==Clust)+1],'Color', 'w', 'LineWidth',2)
hold on
% Barks onset
line([-Tstart -Tstart], [0 sum(T==Clust)],'Color','y','LineStyle','--', 'LineWidth',2)
hold on
% Trills onset
line((-Tstart + TBa)*ones(2,1), [0 sum(T==Clust)],'Color','y','LineStyle','--', 'LineWidth',2)
ylabel('Units')
xlabel('Time (s)')
xticks([1 -Tstart TBa TBa-Tstart])
xticklabels([Tstart/10^3 0 Tstart/10^3 0])
title('Barks               Trills')
hold off

plot(mean(KDE_onset_Mat_BaTr_ZS(T==Clust,:)), 'k-', 'LineWidth',2)
xlim([0 size(KDE_onset_Mat_BaTr_ZS,2)])
xlabel('Time (s)')
xticks([1 -Tstart TBa TBa-Tstart])
xticklabels([Tstart/10^3 0 Tstart/10^3 0])
hold on
% Barks onset
line([-Tstart -Tstart], CLim,'Color','r','LineStyle','--', 'LineWidth',2)
hold on
% Trills onset
line((-Tstart + TBa)*ones(2,1), CLim,'Color','r','LineStyle','--', 'LineWidth',2)
ylabel('z-scored rate')
title('Barks                       Trills')
hold off

% cluster 5
Clust=5;
IndSSU = intersect(GoodCellIndices(BaTr_ind(T==Clust)), find(SSSU));
IndSMU = intersect(GoodCellIndices(BaTr_ind(T==Clust)), find(SSMU));
fprintf(1,'**** Cluster %d *****\n%d units, %d single units, %d multi-units\n', Clust, sum(T==Clust),length(IndSSU),length(IndSMU))
for ii=1:length(IndSSU)
    fprintf('Single Unit: %s\n',ListSSU(IndSSU(ii)).name)
end
for ii=1:length(IndSMU)
    fprintf('Multi Unit: %s\n',ListSSU(IndSMU(ii)).name)
end
fprintf(1,' Plot ZS data Cluster %d \n', Clust)
imagesc(KDE_onset_Mat_BaTr_ZS(T==Clust,:))
if CLim01
    caxis(CLim)
else
    CLim = caxis;
end
colorbar()
colormap('cool')
hold on
% delimiting Barks from Trills
line(TBa*ones(2,1), [-1 sum(T==Clust)+1],'Color', 'w', 'LineWidth',2)
hold on
% Barks onset
line([-Tstart -Tstart], [0 sum(T==Clust)],'Color','y','LineStyle','--', 'LineWidth',2)
hold on
% Trills onset
line((-Tstart + TBa)*ones(2,1), [0 sum(T==Clust)],'Color','y','LineStyle','--', 'LineWidth',2)
ylabel('Units')
xlabel('Time (s)')
xticks([1 -Tstart TBa TBa-Tstart])
xticklabels([Tstart/10^3 0 Tstart/10^3 0])
title('Barks               Trills')
hold off

plot(mean(KDE_onset_Mat_BaTr_ZS(T==Clust,:)), 'k-', 'LineWidth',2)
xlim([0 size(KDE_onset_Mat_BaTr_ZS,2)])
xlabel('Time (s)')
xticks([1 -Tstart TBa TBa-Tstart])
xticklabels([Tstart/10^3 0 Tstart/10^3 0])
hold on
% Barks onset
line([-Tstart -Tstart], CLim,'Color','r','LineStyle','--', 'LineWidth',2)
hold on
% Trills onset
line((-Tstart + TBa)*ones(2,1), CLim,'Color','r','LineStyle','--', 'LineWidth',2)
ylabel('z-scored rate')
title('Barks                       Trills')
hold off
%%
save('explore_populationSU_data_5000.mat')
%% Hierarchical clustering on KDE onset of all cells for Ba and Tr starting at -200ms and ending at 500ms

% gather the data
Tstart = -200;
Tstop = 500;
GoodCellIndices = sort([find(SSSU); find(SSMU)]);
GC = length(GoodCellIndices);
KDE_onset = cell(GC,3);
T_onset = cell(GC,2);
Tmax = nan(GC,2);
MeanKDEBaTrOp = nan(GC,1);
StdKDEBaTrOp = nan(GC,1);
MeanKDEAllVocOp = nan(GC,1);
StdKDEAllVocOp = nan(GC,1);
for ss=1:GC
    fprintf(1,'File %d/%d\n',ss,GC)
    [~,FileName] = fileparts(ListSSU(GoodCellIndices(ss)).name);
    Data=load(fullfile(ListSSU(GoodCellIndices(ss)).folder,ListSSU(GoodCellIndices(ss)).name));
    if isfield(Data,'KDE_onset') && isfield(Data.KDE_onset, 'SelfBaOp')
        Tmax(ss,1) = max(Data.KDE_onset.SelfBaOp(2,:));
        KDE_onset{ss,1} = Data.KDE_onset.SelfBaOp(1,find(Data.KDE_onset.SelfBaOp(2,:)==Tstart):find(Data.KDE_onset.SelfBaOp(2,:)==Tstop));
    end
    if isfield(Data,'KDE_onset') && isfield(Data.KDE_onset, 'SelfTrOp')
        Tmax(ss,2) = max(Data.KDE_onset.SelfTrOp(2,:));
        KDE_onset{ss,2} = Data.KDE_onset.SelfTrOp(1,find(Data.KDE_onset.SelfTrOp(2,:)==Tstart):find(Data.KDE_onset.SelfTrOp(2,:)==Tstop));
    end
    if isfield(Data,'KDE_onset') && isfield(Data.KDE_onset, 'SelfVocOp')
        KDE_onset{ss,3} = Data.KDE_onset.SelfVocOp(1,find(Data.KDE_onset.SelfVocOp(2,:)==Tstart):find(Data.KDE_onset.SelfVocOp(2,:)==Tstop));
        MeanKDEAllVocOp(ss) = nanmean(KDE_onset{ss,3}); 
        StdKDEAllVocOp(ss) = nanstd(KDE_onset{ss,3}); 
    end
    MeanKDEBaTrOp(ss) = nanmean([KDE_onset{ss,1} KDE_onset{ss,2}]); 
    StdKDEBaTrOp(ss) = nanstd([KDE_onset{ss,1} KDE_onset{ss,2}]); 
end
save('explore_populationSU_data_200.mat')
%%
% Explore the average spike rates and get rid of non active cells?
histogram(MeanKDEAllVocOp,'BinWidth',0.1)
xlabel('Mean KDE All Voc (Hz)')
ylabel('# units')
histogram(MeanKDEAllVocOp,'BinWidth',0.1)
xlabel('Mean KDE All Voc (Hz)')
ylabel('# units')
xlim([0 5])
ActiveCells = find(MeanKDEAllVocOp>0.1);
fprintf(1,'Number of active cells: %d',length(ActiveCells))
%%
% Trim the data of active cells in time and create a matrix of all the z-scored KDE

BaTr_0ind = ~isnan(Tmax(:,1)) .* ~isnan(Tmax(:,2)).* ~isnan(MeanKDEBaTrOp).*MeanKDEAllVocOp>0.1;
BaTr_Ind = find(BaTr_0ind);
fprintf('The clustering algorithm can be performed on the data of %d/%d\n',sum(BaTr_0ind),length(ActiveCells))
TBa = length(Tstart:Tstop);
TTr = length(Tstart:Tstop);
KDE_onset_Mat_BaTr_ZS_noTrim = nan(sum(BaTr_0ind),TBa + TTr);
for ss=1:sum(BaTr_0ind)
    fprintf(1,'File %d/%d\n',ss,sum(BaTr_0ind))
    KDE_onset_Mat_BaTr_ZS_noTrim(ss,:) = ([KDE_onset{BaTr_Ind(ss),1}(1:TBa) KDE_onset{BaTr_Ind(ss),2}(1:TTr)]-MeanKDEBaTrOp(BaTr_Ind(ss)))/StdKDEBaTrOp(BaTr_Ind(ss));
end

%%
% Explore the number of time points with signficant (zscore>2) difference
% in spike rate
SignifTP = sum(abs(KDE_onset_Mat_BaTr_ZS_noTrim)>1.6,2);
histogram(SignifTP, 'BinWidth',10)
xlabel('Number of significant time points (ms)')
ylabel('# units')
histogram(SignifTP(logical(SignifTP)), 'BinWidth',20)
xlabel('Number of significant time points (ms)')
ylabel('# units')
fprintf(1,'%d/%d (%.2f %%) units are significant\n',sum(logical(SignifTP)),length(SignifTP),100*sum(logical(SignifTP))/length(SignifTP))
fprintf(1, 'Duration of significance: %.1f +/- %.1f ms\n',mean(SignifTP(logical(SignifTP))), std(SignifTP(logical(SignifTP)))/(sum(logical(SignifTP)))^0.5)
fprintf(1,'Minimum value %.1f ms\n',min(SignifTP(logical(SignifTP))))
fprintf(1, 'Maximum value %.1f ms\n',max(SignifTP(logical(SignifTP))))

%%
ListCellsGC = ListSSU(GoodCellIndices);
ListCellsGCOpFr = ListCellsGC(BaTr_Ind);
NonSignif=find(~logical(SignifTP));
fprintf(1,'***** Checking non-significant cells ******')
figure;
for ii=1:length(NonSignif)
    clc
    set(gcf, 'Visible','on')
    fprintf(1,ListCellsGCOpFr(NonSignif(ii)).name)
    plot(KDE_onset_Mat_BaTr_ZS(NonSignif(ii),:))
    title(sprintf('%s',ListCellsGCOpFr(NonSignif(ii)).name))
    pause()
end
%%
% Restrict the dataset to significant cells
KDE_onset_Mat_BaTr_ZS = KDE_onset_Mat_BaTr_ZS_noTrim(logical(SignifTP),:);
BaTr_ind = BaTr_Ind(logical(SignifTP));
%%
% Clustering based on zscored KDE
Z = linkage(KDE_onset_Mat_BaTr_ZS,'ward','euclidean')
D1 = dendrogram(Z,0, 'ColorThreshold','Default');
set(D1,'LineWidth',2)
T = cluster(Z,'maxclust',6);
cutoff = median([Z(end-5,3) Z(end-4,3)]);
D2=dendrogram(Z,0,'ColorThreshold',cutoff,'Labels',num2str(T));
set(D2, 'LineWidth',2)
D3=dendrogram(Z,30,'ColorThreshold',cutoff,'Labels',num2str(T));
set(D3, 'LineWidth',2)
%% 
% Plot the average spike rate for each cluster

CLim01 = 1;
if CLim01
    CLim = [-3 3];
end
% cluster 1
Clust=1;
IndSSU = intersect(GoodCellIndices(BaTr_ind(T==Clust)), find(SSSU));
IndSMU = intersect(GoodCellIndices(BaTr_ind(T==Clust)), find(SSMU));
fprintf(1,'**** Cluster %d *****\n%d units, %d single units, %d multi-units\n', Clust, sum(T==Clust),length(IndSSU),length(IndSMU))
for ii=1:length(IndSSU)
    fprintf('Single Unit: %s\n',ListSSU(IndSSU(ii)).name)
end
for ii=1:length(IndSMU)
    fprintf('Multi Unit: %s\n',ListSSU(IndSMU(ii)).name)
end
fprintf(1,' Plot ZS data Cluster %d \n', Clust)
imagesc(KDE_onset_Mat_BaTr_ZS(T==Clust,:))
if CLim01
    caxis(CLim)
else
    CLim = caxis;
end
colorbar()
colormap('cool')
hold on
% delimiting Barks from Trills
line(TBa*ones(2,1), [-1 sum(T==Clust)+1],'Color', 'w', 'LineWidth',2)
hold on
% Barks onset
line([-Tstart -Tstart], [0 sum(T==Clust)],'Color','y','LineStyle','--', 'LineWidth',2)
hold on
% Trills onset
line((-Tstart + TBa)*ones(2,1), [0 sum(T==Clust)],'Color','y','LineStyle','--', 'LineWidth',2)
ylabel('Units')
xlabel('Time (s)')
xticks([1 -Tstart TBa TBa-Tstart])
xticklabels([Tstart/10^3 0 Tstart/10^3 0])
title('Barks               Trills')
hold off

plot(mean(KDE_onset_Mat_BaTr_ZS(T==Clust,:)), 'k-', 'LineWidth',2)
xlim([0 size(KDE_onset_Mat_BaTr_ZS,2)])
xlabel('Time (s)')
xticks([1 -Tstart TBa TBa-Tstart])
xticklabels([Tstart/10^3 0 Tstart/10^3 0])
hold on
% Barks onset
line([-Tstart -Tstart], CLim,'Color','r','LineStyle','--', 'LineWidth',2)
hold on
% Trills onset
line((-Tstart + TBa)*ones(2,1), CLim,'Color','r','LineStyle','--', 'LineWidth',2)
ylabel('z-scored rate')
title('Barks                       Trills')
hold off


% cluster 2 good example: 0612_SSS_1-81
Clust=2;
IndSSU = intersect(GoodCellIndices(BaTr_ind(T==Clust)), find(SSSU));
IndSMU = intersect(GoodCellIndices(BaTr_ind(T==Clust)), find(SSMU));
fprintf(1,'**** Cluster %d *****\n%d units, %d single units, %d multi-units\n', Clust, sum(T==Clust),length(IndSSU),length(IndSMU))
for ii=1:length(IndSSU)
    fprintf('Single Unit: %s\n',ListSSU(IndSSU(ii)).name)
end
for ii=1:length(IndSMU)
    fprintf('Multi Unit: %s\n',ListSSU(IndSMU(ii)).name)
end
fprintf(1,' Plot ZS data Cluster %d \n', Clust)
imagesc(KDE_onset_Mat_BaTr_ZS(T==Clust,:))
if CLim01
    caxis(CLim)
else
    CLim = caxis;
end
colorbar()
colormap('cool')
hold on
% delimiting Barks from Trills
line(TBa*ones(2,1), [-1 sum(T==Clust)+1],'Color', 'w', 'LineWidth',2)
hold on
% Barks onset
line([-Tstart -Tstart], [0 sum(T==Clust)],'Color','y','LineStyle','--', 'LineWidth',2)
hold on
% Trills onset
line((-Tstart + TBa)*ones(2,1), [0 sum(T==Clust)],'Color','y','LineStyle','--', 'LineWidth',2)
ylabel('Units')
xlabel('Time (s)')
xticks([1 -Tstart TBa TBa-Tstart])
xticklabels([Tstart/10^3 0 Tstart/10^3 0])
title('Barks               Trills')
hold off

plot(mean(KDE_onset_Mat_BaTr_ZS(T==Clust,:)), 'k-', 'LineWidth',2)
xlim([0 size(KDE_onset_Mat_BaTr_ZS,2)])
xlabel('Time (s)')
xticks([1 -Tstart TBa TBa-Tstart])
xticklabels([Tstart/10^3 0 Tstart/10^3 0])
hold on
% Barks onset
line([-Tstart -Tstart], CLim,'Color','r','LineStyle','--', 'LineWidth',2)
hold on
% Trills onset
line((-Tstart + TBa)*ones(2,1), CLim,'Color','r','LineStyle','--', 'LineWidth',2)
ylabel('z-scored rate')
title('Barks                       Trills')
hold off

% cluster 3 good example 0620_SSS_3_131
Clust=3;
IndSSU = intersect(GoodCellIndices(BaTr_ind(T==Clust)), find(SSSU));
IndSMU = intersect(GoodCellIndices(BaTr_ind(T==Clust)), find(SSMU));
fprintf(1,'**** Cluster %d *****\n%d units, %d single units, %d multi-units\n', Clust, sum(T==Clust),length(IndSSU),length(IndSMU))
for ii=1:length(IndSSU)
    fprintf('Single Unit: %s\n',ListSSU(IndSSU(ii)).name)
end
for ii=1:length(IndSMU)
    fprintf('Multi Unit: %s\n',ListSSU(IndSMU(ii)).name)
end
fprintf(1,' Plot ZS data Cluster %d \n', Clust)
imagesc(KDE_onset_Mat_BaTr_ZS(T==Clust,:))
if CLim01
    caxis(CLim)
else
    CLim = caxis;
end
colorbar()
colormap('cool')
hold on
% delimiting Barks from Trills
line(TBa*ones(2,1), [-1 sum(T==Clust)+1],'Color', 'w', 'LineWidth',2)
hold on
% Barks onset
line([-Tstart -Tstart], [0 sum(T==Clust)],'Color','y','LineStyle','--', 'LineWidth',2)
hold on
% Trills onset
line((-Tstart + TBa)*ones(2,1), [0 sum(T==Clust)],'Color','y','LineStyle','--', 'LineWidth',2)
ylabel('Units')
xlabel('Time (s)')
xticks([1 -Tstart TBa TBa-Tstart])
xticklabels([Tstart/10^3 0 Tstart/10^3 0])
title('Barks               Trills')
hold off

plot(mean(KDE_onset_Mat_BaTr_ZS(T==Clust,:)), 'k-', 'LineWidth',2)
xlim([0 size(KDE_onset_Mat_BaTr_ZS,2)])
xlabel('Time (s)')
xticks([1 -Tstart TBa TBa-Tstart])
xticklabels([Tstart/10^3 0 Tstart/10^3 0])
hold on
% Barks onset
line([-Tstart -Tstart], CLim,'Color','r','LineStyle','--', 'LineWidth',2)
hold on
% Trills onset
line((-Tstart + TBa)*ones(2,1), CLim,'Color','r','LineStyle','--', 'LineWidth',2)
ylabel('z-scored rate')
title('Barks                       Trills')
hold off

% cluster 4
Clust=4;
IndSSU = intersect(GoodCellIndices(BaTr_ind(T==Clust)), find(SSSU));
IndSMU = intersect(GoodCellIndices(BaTr_ind(T==Clust)), find(SSMU));
fprintf(1,'**** Cluster %d *****\n%d units, %d single units, %d multi-units\n', Clust, sum(T==Clust),length(IndSSU),length(IndSMU))
for ii=1:length(IndSSU)
    fprintf('Single Unit: %s\n',ListSSU(IndSSU(ii)).name)
end
for ii=1:length(IndSMU)
    fprintf('Multi Unit: %s\n',ListSSU(IndSMU(ii)).name)
end
fprintf(1,' Plot ZS data Cluster %d \n', Clust)
imagesc(KDE_onset_Mat_BaTr_ZS(T==Clust,:))
if CLim01
    caxis(CLim)
else
    CLim = caxis;
end
colorbar()
colormap('cool')
hold on
% delimiting Barks from Trills
line(TBa*ones(2,1), [-1 sum(T==Clust)+1],'Color', 'w', 'LineWidth',2)
hold on
% Barks onset
line([-Tstart -Tstart], [0 sum(T==Clust)],'Color','y','LineStyle','--', 'LineWidth',2)
hold on
% Trills onset
line((-Tstart + TBa)*ones(2,1), [0 sum(T==Clust)],'Color','y','LineStyle','--', 'LineWidth',2)
ylabel('Units')
xlabel('Time (s)')
xticks([1 -Tstart TBa TBa-Tstart])
xticklabels([Tstart/10^3 0 Tstart/10^3 0])
title('Barks               Trills')
hold off

plot(mean(KDE_onset_Mat_BaTr_ZS(T==Clust,:)), 'k-', 'LineWidth',2)
xlim([0 size(KDE_onset_Mat_BaTr_ZS,2)])
xlabel('Time (s)')
xticks([1 -Tstart TBa TBa-Tstart])
xticklabels([Tstart/10^3 0 Tstart/10^3 0])
hold on
% Barks onset
line([-Tstart -Tstart], CLim,'Color','r','LineStyle','--', 'LineWidth',2)
hold on
% Trills onset
line((-Tstart + TBa)*ones(2,1), CLim,'Color','r','LineStyle','--', 'LineWidth',2)
ylabel('z-scored rate')
title('Barks                       Trills')
hold off

% cluster 5
Clust=5;
IndSSU = intersect(GoodCellIndices(BaTr_ind(T==Clust)), find(SSSU));
IndSMU = intersect(GoodCellIndices(BaTr_ind(T==Clust)), find(SSMU));
fprintf(1,'**** Cluster %d *****\n%d units, %d single units, %d multi-units\n', Clust, sum(T==Clust),length(IndSSU),length(IndSMU))
for ii=1:length(IndSSU)
    fprintf('Single Unit: %s\n',ListSSU(IndSSU(ii)).name)
end
for ii=1:length(IndSMU)
    fprintf('Multi Unit: %s\n',ListSSU(IndSMU(ii)).name)
end
fprintf(1,' Plot ZS data Cluster %d \n', Clust)
imagesc(KDE_onset_Mat_BaTr_ZS(T==Clust,:))
if CLim01
    caxis(CLim)
else
    CLim = caxis;
end
colorbar()
colormap('cool')
hold on
% delimiting Barks from Trills
line(TBa*ones(2,1), [-1 sum(T==Clust)+1],'Color', 'w', 'LineWidth',2)
hold on
% Barks onset
line([-Tstart -Tstart], [0 sum(T==Clust)],'Color','y','LineStyle','--', 'LineWidth',2)
hold on
% Trills onset
line((-Tstart + TBa)*ones(2,1), [0 sum(T==Clust)],'Color','y','LineStyle','--', 'LineWidth',2)
ylabel('Units')
xlabel('Time (s)')
xticks([1 -Tstart TBa TBa-Tstart])
xticklabels([Tstart/10^3 0 Tstart/10^3 0])
title('Barks               Trills')
hold off

plot(mean(KDE_onset_Mat_BaTr_ZS(T==Clust,:)), 'k-', 'LineWidth',2)
xlim([0 size(KDE_onset_Mat_BaTr_ZS,2)])
xlabel('Time (s)')
xticks([1 -Tstart TBa TBa-Tstart])
xticklabels([Tstart/10^3 0 Tstart/10^3 0])
hold on
% Barks onset
line([-Tstart -Tstart], CLim,'Color','r','LineStyle','--', 'LineWidth',2)
hold on
% Trills onset
line((-Tstart + TBa)*ones(2,1), CLim,'Color','r','LineStyle','--', 'LineWidth',2)
ylabel('z-scored rate')
title('Barks                       Trills')
hold off


% cluster 6
Clust=6;
IndSSU = intersect(GoodCellIndices(BaTr_ind(T==Clust)), find(SSSU));
IndSMU = intersect(GoodCellIndices(BaTr_ind(T==Clust)), find(SSMU));
fprintf(1,'**** Cluster %d *****\n%d units, %d single units, %d multi-units\n', Clust, sum(T==Clust),length(IndSSU),length(IndSMU))
for ii=1:length(IndSSU)
    fprintf('Single Unit: %s\n',ListSSU(IndSSU(ii)).name)
end
for ii=1:length(IndSMU)
    fprintf('Multi Unit: %s\n',ListSSU(IndSMU(ii)).name)
end
fprintf(1,' Plot ZS data Cluster %d \n', Clust)
imagesc(KDE_onset_Mat_BaTr_ZS(T==Clust,:))
if CLim01
    caxis(CLim)
else
    CLim = caxis;
end
colorbar()
colormap('cool')
hold on
% delimiting Barks from Trills
line(TBa*ones(2,1), [-1 sum(T==Clust)+1],'Color', 'w', 'LineWidth',2)
hold on
% Barks onset
line([-Tstart -Tstart], [0 sum(T==Clust)],'Color','y','LineStyle','--', 'LineWidth',2)
hold on
% Trills onset
line((-Tstart + TBa)*ones(2,1), [0 sum(T==Clust)],'Color','y','LineStyle','--', 'LineWidth',2)
ylabel('Units')
xlabel('Time (s)')
xticks([1 -Tstart TBa TBa-Tstart])
xticklabels([Tstart/10^3 0 Tstart/10^3 0])
title('Barks               Trills')
hold off

plot(mean(KDE_onset_Mat_BaTr_ZS(T==Clust,:)), 'k-', 'LineWidth',2)
xlim([0 size(KDE_onset_Mat_BaTr_ZS,2)])
xlabel('Time (s)')
xticks([1 -Tstart TBa TBa-Tstart])
xticklabels([Tstart/10^3 0 Tstart/10^3 0])
hold on
% Barks onset
line([-Tstart -Tstart], CLim,'Color','r','LineStyle','--', 'LineWidth',2)
hold on
% Trills onset
line((-Tstart + TBa)*ones(2,1), CLim,'Color','r','LineStyle','--', 'LineWidth',2)
ylabel('z-scored rate')
title('Barks                       Trills')
hold off
%%
save('explore_populationSU_data.mat')
%%
% For each day, each logger, each unit find the average spike rate
PLOT=1;
MeanSR4Calulations = 1; % Values in Hz of the mean SR for doing calculations
NDays = length(Dates);
HypNSU = 200;
TimeStep = 10*60; % Time resolution in seconds at which the spike rate shoule be calculated
MaxRecTime = 60*60*6;
TimePoints = 0:TimeStep:MaxRecTime;
SpikeRate = nan(HypNSU,length(TimePoints)-1);% will contain spike rate in Hz
KDE = nan(HypNSU,length(TimePoints)-1);% will contain spike rate in Hz
KDE_error = cell(HypNSU,1);% will contain spike rate error in Hz
Peak2Peak = nan(HypNSU,length(TimePoints)-1);% will contain mean spike amplitude along time
SpikeLife = nan(HypNSU,1); % Duration in minutes of period containing a spike from the cell
SD_SR = nan(HypNSU,1);
Mean_SR = nan(HypNSU,1); % average mean SR in Hz of each cell only counting time windows of 10min where there is at least one spike (cell still active)
Bat_ID = nan(HypNSU,1);
Date_ID = nan(HypNSU,1);
Tetrode_ID = nan(HypNSU,1);
SS_ID = cell(HypNSU,1);
Mean_Peak2Peak = nan(HypNSU,1);
SpikeShape = cell(HypNSU,4);
Alpha = 0.01; % Detection thershold for significant spike rate modulation before correction for false positive
SignWinVoc = nan(HypNSU,1); % number of time bin in the KDE when producing the vocalizations above the mean baseline firing rate by twice the SD of the baseline firing rate
SignWinHear = nan(HypNSU,1);% number of time bin in the KDE when hearing the vocalizations above the mean baseline firing rate by twice the SD of the baseline firing rate
ProdCellGood = nan(HypNSU,1);

CellCount=0;
for dd=1:NDays
    Date = Dates(dd);
    fprintf(1,'%d\n',Date)
    Path2Data = fullfile(Path2AllData, ['20' num2str(Date)]);
    % Get the number of loggers
    Logger_dirs = dir(fullfile(Path2Data, '*ogger*'));
    Logger_dirs=Logger_dirs([Logger_dirs.isdir]);
    NLogger = length(Logger_dirs);
    % Identify the type of logger and extract neural data
    LoggerType = cell(NLogger,1);
    % LOAD the data of KDE to do a test for vocalization production
    FileData = dir(fullfile(Path2Data, sprintf('%d_*_VocExtractData_*', Date)));
    load(fullfile(FileData(1).folder,FileData(1).name), 'SpikeTimesVoc')
    Ind_ = strfind(FileData(1).name, '_');
    Delay = str2double(FileData(1).name(Ind_(end) + (1:3)));
    for ll=1:NLogger
        fprintf(1,'%s\n',Logger_dirs(ll).name)
        LData_folder = fullfile(Logger_dirs(ll).folder, Logger_dirs(ll).name,'extracted_data');
        LDir = dir(fullfile(LData_folder, '*CSC*.mat'));
        LData = load(fullfile(LDir(1).folder, LDir(1).name), 'logger_type', 'logger_serial_number');
        LoggerType{ll}  = LData.logger_type;
        if strcmp(LoggerType{ll}, 'Mous') || strcmp(LoggerType{ll}, 'Rat')
            SU_files = dir(fullfile(LData_folder, '*TT*SS*.mat'));
            NSU = length(SU_files);
            %Get the Bat-ID for that logger
            RowData = find((cell2mat(RecTableData(2:end,1))== Date)) +1;
            DataInfo = RecTableData(RowData,:);
            NL_ID = cell2mat(DataInfo(NLCol));
            NLCol_local = NLCol(NL_ID==str2double(LData.logger_serial_number));
            Bat_ID_local = DataInfo{BatIDCol(find(BatIDCol<NLCol_local,1,'last'))};
            if Bat_ID_local==11689 % Only run on Hodor

                for uu=1:NSU
                    CellCount = CellCount+1;
                    fprintf(1,'Cell %d\n',CellCount)
                    Cell = load(fullfile(SU_files(uu).folder, SU_files(uu).name)); % This load the Spike_arrival_times in micro seconds and the Spike_snippets in microVolts, ceiled at 500uV for spike sorting projection
                    SpikeTimes = (Cell.Spike_arrival_times-Cell.Spike_arrival_times(1))*10^-6; % Spike arrival times centered to the first spike, in seconds

                    % Find the best channel to calculate the peak2peak value
                    % (channel with largest spike trace)
                    P2P_all = nan(size(Cell.Spike_snippets,3),4);
                    for cc=1:4 % calculate for each channel the peak2peak for all spikes
                        P2P_all(:,cc)=reshape(max(Cell.Spike_snippets(:,cc,:),[],1) - min(Cell.Spike_snippets(:,cc,:),[],1),size(Cell.Spike_snippets,3),1);
                    end
                    [~,I]=max(P2P_all,[],2);
                    Best_c = nan(1,4);
                    for cc=1:4
                        Best_c(cc) = sum(I==cc);
                    end
                    [~,Best_c] = max(Best_c); % This is the channel with the largest spike


                    for tt=1:(length(TimePoints)-1)
                        Spike_local = (SpikeTimes>=TimePoints(tt)) .* (SpikeTimes<=TimePoints(tt+1));
                        SpikeRate(CellCount,tt) = sum(Spike_local)/TimeStep; % this is the local spike rate in Hertz
                        SpikeInd = find(Spike_local);
                        % calculate for each channel the average peak2peak for the spikes occuring during that time slot
                        Peak2Peak(CellCount,tt) = ADBitVolts_sorting.*mean(max(Cell.Spike_snippets(:,Best_c,SpikeInd),[],1) - min(Cell.Spike_snippets(:,Best_c,SpikeInd),[],1));
                    end



                    % calculate average statistics for that cell
                    SpikeLife(CellCount) = (TimePoints(find(~isnan(Peak2Peak(CellCount,:)),1,'Last'))- TimePoints(find(~isnan(Peak2Peak(CellCount,:)),1,'First')))/60;
                    [KDE(CellCount,:),~,KDE_error{CellCount}] = kde_wrapper(SpikeTimes,TimePoints(2:end)-TimeStep/2,1/TimeStep);
                    Mean_Peak2Peak(CellCount) = mean(P2P_all(:,Best_c));
                    Mean_SR(CellCount) = mean(SpikeRate(CellCount,find(~isnan(Peak2Peak(CellCount,:)))));
                    SD_SR(CellCount) = std(SpikeRate(CellCount,find(~isnan(Peak2Peak(CellCount,:)))));
                    Bat_ID(CellCount) = Bat_ID_local;
                    Date_ID(CellCount) = str2double(['20' num2str(Date)]);
                    TTInd = strfind(SU_files(uu).name, 'TT');
                    Tetrode_ID(CellCount) = str2double(SU_files(uu).name(TTInd+2));
                    SSInd = strfind(SU_files(uu).name, 'SS');
                    SS_ID{CellCount} = SU_files(uu).name(SSInd+(3:4));

                    % extract the average spike shape for that cell
                    for cc=1:4
                        SpikeShape{CellCount,cc}=nan(2,size(Cell.Spike_snippets,1));
                        SpikeShape{CellCount,cc}(1,:) = mean(Cell.Spike_snippets(:,cc,:),3).*ADBitVolts_sorting;
                        SpikeShape{CellCount,cc}(2,:) = std(Cell.Spike_snippets(:,cc,:),0,3).*ADBitVolts_sorting;
                    end
                    
                    
                    % Test if the cell has a modulated spike rate compared to
                    % averaged before vocalizations (one time window with KDE
                    % away from the mean by twice SD). Rate is in spike per ms
                    % here. Test only if the average spike rate is  above 0.1Hz (1 spike every 10 seconds);
                    ST = SpikeTimesVoc.(sprintf('Logger%s',LData.logger_serial_number));
                    LogicalInd=logical((ST.Sum_Psth_KDEfiltered_VocCall{uu,1}>-Delay) .* (ST.Sum_Psth_KDEfiltered_VocCall{uu,1}<mean(ST.VocDuration+Delay)));
                    Fig0=figure(1);
                    clf(Fig0)
                    plot(ST.Sum_Psth_KDEfiltered_VocCall{uu,1}(LogicalInd), ST.Sum_Psth_KDEfiltered_VocCall{uu,2}(LogicalInd), '-k', 'LineWidth',2)
                    hold on
                    plot([min(ST.Sum_Psth_KDEfiltered_VocCall{uu,1}(LogicalInd)) max(ST.Sum_Psth_KDEfiltered_VocCall{uu,1}(LogicalInd))], MeanBaselineVoc/1000.* ones(2,1), ':r', 'LineWidth',2)
                    ylabel('Spike Rate (Hz)')
                    xlabel('Time (ms)')
                    legend('Rate','Background')
                    title(sprintf('Test for modulated spike rate M%d %d TT%d SS%s SU%d', Bat_ID(CellCount),Date_ID(CellCount), Tetrode_ID(CellCount), SS_ID{CellCount},uu))
                    
                    hold off
                    if Mean_SR(CellCount)>MeanSR4Calulations
                        if ~isempty(ST.Sum_Psth_KDEfiltered_VocBaseline) && iscell(ST.Sum_Psth_KDEfiltered_VocBaseline)
                            MeanBaselineVoc = mean(ST.Sum_Psth_KDEfiltered_VocBaseline{uu,2})*1000;% Average baseline rate in Hz
                            if MeanBaselineVoc>MeanSR4Calulations
                                Zscore = abs(ST.Sum_Psth_KDEfiltered_VocCall{uu,2}(LogicalInd) - MeanBaselineVoc/1000)/std(ST.Sum_Psth_KDEfiltered_VocBaseline{uu,2});
                                P_value = normcdf(Zscore, 'upper');
                                PV_sorted = sort(P_value);
                                
                                
                                % False Rate detection correction,
                                % Benjamini-Hochberg procedure
                                SignWinVoc(CellCount)=sum(PV_sorted<(Alpha/length(PV_sorted).*(1:length(PV_sorted))));
                            end
                        end
                        if ~isempty(ST.Sum_Psth_KDEfiltered_HearBaseline) && iscell(ST.Sum_Psth_KDEfiltered_HearBaseline)
                            MeanBaselineHear = mean(ST.Sum_Psth_KDEfiltered_HearBaseline{uu,2})*1000;% Average baseline rate in Hz
                            if MeanBaselineHear>MeanSR4Calulations
                                LogicalInd=logical((ST.Sum_Psth_KDEfiltered_HearCall{uu,1}>-Delay) .* (ST.Sum_Psth_KDEfiltered_HearCall{uu,1}<mean(ST.HearDuration(ST.HearOnlyInd)+Delay)));
                                Zscore = abs(ST.Sum_Psth_KDEfiltered_HearCall{uu,2}(LogicalInd) - MeanBaselineHear/1000)/std(ST.Sum_Psth_KDEfiltered_HearBaseline{uu,2});
                                P_value = normcdf(Zscore, 'upper');
                                PV_sorted = sort(P_value);
                                % False Rate detection correction,
                                % Benjamini-Hochberg procedure
                                SignWinHear(CellCount)=sum(PV_sorted<(Alpha/length(PV_sorted).*(1:length(PV_sorted))));
                            end
                        end

                    end

                    if PLOT
                        % Plot the average spike rate over time, the average spike
                        % amplitude over time and the mean snippets
                        Fig1=figure(2);
                        clf(Fig1)
                        yyaxis left
                        plot((TimePoints(2:end)-TimeStep/2)/60,SpikeRate(CellCount,:),'b-', 'LineWidth',2)
                        hold on
                        shadedErrorBar((TimePoints(2:end)-TimeStep/2)/60,KDE(CellCount,:),KDE_error{CellCount},{'b--', 'LineWidth',2})
                        ylabel('Spike rate (Hz)')
                        xlabel('Time (min)')
                        ylim([0 max(MeanSR4Calulations/10,Fig1.Children.YLim(2))])
                        hold on
                        if Fig1.Children.YLim(2)>MeanSR4Calulations
                            hline(MeanSR4Calulations, 'k:', 'Spike rate threshold for calculating significance')
                        end
                        yyaxis right
                        plot((TimePoints(2:end)-TimeStep/2)/60,Peak2Peak(CellCount,:),'r-', 'LineWidth',2)
                        ylabel('Spike Amplitude (uV)')
                        Fig1.Children.YLim(1)=0;
                        title(sprintf('M%d %d TT%d SS%s SU%d SignifVoc=%d SignifHear=%d', Bat_ID(CellCount),Date_ID(CellCount), Tetrode_ID(CellCount), SS_ID{CellCount},uu,SignWinVoc(CellCount),SignWinHear(CellCount)))
                        hold off
                        Fig2=figure(3);
                        clf(Fig2)
                        Fig2YLim = nan(2,4);
                        for cc=1:4
                            subplot(2,2,cc)
                            shadedErrorBar([],SpikeShape{CellCount,cc}(1,:), SpikeShape{CellCount,cc}(2,:), {'Color','k','LineWidth',2})
                            ylabel('Voltage (uVolt)')
                        end
                        for cc=1:4
                            Fig2YLim(:,cc) = Fig2.Children(cc).YLim;
                        end
                        Fig2YLim_final(1) = min(Fig2YLim(1,:));
                        Fig2YLim_final(2) = max(Fig2YLim(2,:));
                        for cc=1:4
                            Fig2.Children(cc).YLim = Fig2YLim_final;
                        end
                        sgtitle(sprintf('Spike shape M%d %d TT%d SS%s SU%d', Bat_ID(CellCount),Date_ID(CellCount), Tetrode_ID(CellCount), SS_ID{CellCount},uu))
                        print(Fig1,fullfile(Path2Data,sprintf('%d_Logger%s_TT%d_SS%s_SU%d_Rate.pdf', Date, LData.logger_serial_number,Tetrode_ID(CellCount),SS_ID{CellCount},uu)),'-dpdf')
                        print(Fig2,fullfile(Path2Data,sprintf('%d_Logger%s_TT%d_SS%s_SU%d_Snippets.pdf', Date, LData.logger_serial_number,Tetrode_ID(CellCount),SS_ID{CellCount},uu)),'-dpdf')
    %                     if SignWinVoc(CellCount)>0 || SignWinHear(CellCount)>0
        %                     pause()
        %                 end
                        pause(5)
                    end
                    if SignWinVoc(CellCount)>ThreshSig
                        ProdCellGood(CellCount)=input('Good Production Cell?');
                    end
                end
            end
            
        end
    end
end


% Plot the histogram of cells Mean_SR
figure()
[~,edges] = histcounts(log10(Mean_SR));
histogram(Mean_SR,10.^edges)
set(gca, 'XScale','log')
ylabel('# Cells')
xlabel('Average rate (Hz)')

% Scatter plot of mean_SR and Mean amplitude of the spikes

figure()
subplot(2,2,1)
plot(Mean_SR, Mean_Peak2Peak, 'k.','MarkerSize',10)
hold on
plot(Mean_SR(SignWinVoc>ThreshSig), Mean_Peak2Peak(SignWinVoc>ThreshSig), 'r.','MarkerSize',10)
set(gca, 'XScale','log')
ylabel('Spike Amplitude uV')
xlabel('Average rate (Hz)')
hold off

subplot(2,2,2)
plot(Mean_SR, Mean_Peak2Peak, 'k.','MarkerSize',10)
hold on
plot(Mean_SR(SignWinHear>ThreshSig), Mean_Peak2Peak(SignWinHear>ThreshSig), 'c.','MarkerSize',10)
set(gca, 'XScale','log')
ylabel('Spike Amplitude uV')
xlabel('Average rate (Hz)')
hold off

% Scatter plot of mean_SR and Recording duration
subplot(2,2,3)
plot(Mean_SR, SpikeLife, 'k.','MarkerSize',10)
hold on
plot(Mean_SR(SignWinVoc>ThreshSig), SpikeLife(SignWinVoc>ThreshSig), 'r.','MarkerSize',10)
set(gca, 'XScale','log')
ylabel('Recording duration (min)')
ylim([0 400])
xlabel('Average rate (Hz)')
hold off

subplot(2,2,4)
plot(Mean_SR, SpikeLife, 'k.','MarkerSize',10)
hold on
plot(Mean_SR(SignWinHear>ThreshSig), SpikeLife(SignWinHear>ThreshSig), 'c.','MarkerSize',10)
set(gca, 'XScale','log')
ylim([0 400])
ylabel('Recording duration (min)')
xlabel('Average rate (Hz)')
hold off
save('/Volumes/server_home/users/JulieE/LMC_HoHa/PopulationAnalysis.mat')
%% Look at cell one by one

load('/Volumes/server_home/users/JulieE/LMC_HoHa/PopulationAnalysis.mat')
% First voc prod modulated
% ProdCell = find(SignWinVoc>ThreshSig);
% for cc=1:length(ProdCell)
%     fprintf(1,'Date: %d\n',Date_ID(ProdCell(cc)))
%     fprintf(1,'Bat: %d\n',Bat_ID(ProdCell(cc)))
%     fprintf(1,'T%d\n',Tetrode_ID(ProdCell(cc)));
%     fprintf(1,'SS%s\n',SS_ID{ProdCell(cc)});
%     % Scatter plot of mean_SR and Mean amplitude of the spikes
%     figure()
%     subplot(2,1,1)
%     plot(Mean_SR, Mean_Peak2Peak, 'k.','MarkerSize',10)
%     hold on
%     plot(Mean_SR(ProdCell(cc)), Mean_Peak2Peak(ProdCell(cc)), 'r.','MarkerSize',10)
%     set(gca, 'XScale','log')
%     ylabel('Spike Amplitude uV')
%     xlabel('Average rate (Hz)')
%     hold off
%     
%     % Scatter plot of mean_SR and Recording duration
%     subplot(2,1,2)
%     plot(Mean_SR, SpikeLife, 'k.','MarkerSize',10)
%     hold on
%     plot(Mean_SR(ProdCell(cc)), SpikeLife(ProdCell(cc)), 'r.','MarkerSize',10)
%     set(gca, 'XScale','log')
%     ylabel('Recording duration (min)')
%     ylim([0 400])
%     xlabel('Average rate (Hz)')
%     hold off  
% end
ProdCellGoodInd = find(ProdCellGood==1);
% Good Prod Cell: 121,122,123, 103,102,99,58

% Then Hear only modulated cell
HearCell = find((SignWinHear>ThreshSig).*~(SignWinVoc>ThreshSig));
HearCellGood = nan(length(HearCell),1);
for cc=1:length(HearCell)
    fprintf(1,'\n\n')
    fprintf(1,'Date: %d\n',Date_ID(HearCell(cc)))
    fprintf(1,'Bat: %d\n',Bat_ID(HearCell(cc)))
    fprintf(1,'T%d\n',Tetrode_ID(HearCell(cc)));
    fprintf(1,'SS%s\n',SS_ID{HearCell(cc)});
    % Scatter plot of mean_SR and Mean amplitude of the spikes
    figure()
    subplot(2,1,1)
    plot(Mean_SR, Mean_Peak2Peak, 'k.','MarkerSize',10)
    hold on
    plot(Mean_SR(HearCell(cc)), Mean_Peak2Peak(HearCell(cc)), 'c.','MarkerSize',10)
    set(gca, 'XScale','log')
    ylabel('Spike Amplitude uV')
    xlabel('Average rate (Hz)')
    hold off
    
    % Scatter plot of mean_SR and Recording duration
    subplot(2,1,2)
    plot(Mean_SR, SpikeLife, 'k.','MarkerSize',10)
    hold on
    plot(Mean_SR(HearCell(cc)), SpikeLife(HearCell(cc)), 'c.','MarkerSize',10)
    set(gca, 'XScale','log')
    ylim([0 400])
    ylabel('Recording duration (min)')
    xlabel('Average rate (Hz)')
    hold off
    HearCellGood=input('GoodCell?');
end

HearCellGood = find(HearCellGood);
% Only 68 is clearly modulated by vocalization hearing


% Scatter plot of mean_SR and Mean amplitude of the spikes
figure()
subplot(2,2,1)
plot(Mean_SR, Mean_Peak2Peak, 'k.','MarkerSize',10)
hold on
plot(Mean_SR(ProdCellGoodInd), Mean_Peak2Peak(ProdCellGoodInd), 'r.','MarkerSize',10)
set(gca, 'XScale','log')
ylabel('Spike Amplitude uV')
xlabel('Average rate (Hz)')
hold off

subplot(2,2,2)
plot(Mean_SR, Mean_Peak2Peak, 'k.','MarkerSize',10)
hold on
if ~isempty(HearCellGood)
    plot(Mean_SR(HearCellGood), Mean_Peak2Peak(HearCellGood), 'c.','MarkerSize',10)
end
set(gca, 'XScale','log')
ylabel('Spike Amplitude uV')
xlabel('Average rate (Hz)')
hold off

% Scatter plot of mean_SR and Mean amplitude of the spikes
subplot(2,2,3)
plot(Mean_SR, SpikeLife, 'k.','MarkerSize',10)
hold on
plot(Mean_SR(ProdCellGoodInd), SpikeLife(ProdCellGoodInd), 'r.','MarkerSize',10)
set(gca, 'XScale','log')
ylabel('Recording duration (min)')
ylim([0 400])
xlabel('Average rate (Hz)')
hold off

subplot(2,2,4)
plot(Mean_SR, SpikeLife, 'k.','MarkerSize',10)
hold on
if ~isempty(HearCellGood)
    plot(Mean_SR(HearCellGood), SpikeLife(HearCellGood), 'c.','MarkerSize',10)
end
set(gca, 'XScale','log')
ylim([0 400])
ylabel('Recording duration (min)')
xlabel('Average rate (Hz)')
hold off