function createMatclustFile(OutputPath)
%createMatclustFile(fileName,destFolder)
%saves the spike data in one nTrodes's extracted file for spikes as a file that matclust can open
%filename -- the name to give the files (i.e, 'tetrode1')
%destFolder -- the path to where the new file will be saved

if nargin<1
    error('please provide the path to the files containing\nthe snippets and spike arrival time generated by extract_logger_data\n');
end


Snippets_file = dir(fullfile(OutputPath, '*Tetrode_spikes_snippets*'));
SpikeTimes_file = dir(fullfile(OutputPath, '*Tetrode_spikes_time*'));


Num_tetrodes = length(Snippets_file);
for Tetrode_i=1:Num_tetrodes % for each of the electrode bundles, eg. tetrodes
    load(fullfile(SpikeTimes_file(Tetrode_i).folder, SpikeTimes_file(Tetrode_i).name), 'Spike_arrival_times', 'BatID', 'Date');
    load(fullfile(Snippets_file(Tetrode_i).folder, Snippets_file(Tetrode_i).name), 'Snippets');
    TetrodeID = SpikeTimes_file(Tetrode_i).name(end-4);
    if ~isempty(Spike_arrival_times) % check if the electrode bundle has no spikes (eg. if all its channels are inactive)
        % Saving waveforms features of spikes in matclust format
        disp(['Saving spikes from tetrode '  TetrodeID '...'])
        MatClust_Filename=fullfile(OutputPath,sprintf('%s_%s_MatClust%s.mat', BatID, Date,TetrodeID));
        Snippets_dim = size(Snippets); % 1st dim = length one snippet, 2nd dim = # channels, 3rd dim = #spikes
        Filedata.paramnames = cell(Snippets_dim(2)*6+1);
        Filedata.params = nan(Snippets_dim(3), Snippets_dim(2)*6+1);
        
        % save spike time
        pp=1;
        Filedata.paramnames{pp} = 'Time';
        Filedata.params(:,pp) = Spike_arrival_times;
        
        % save spike peaks
        for ch = 1:Snippets_dim(2)
            pp=pp+1;
            Filedata.paramnames{pp} = ['Peak_',num2str(ch),' (uV)'];
            Filedata.params(:,pp) = max(Snippets(:,ch,:),[],3);
        end
        
        % save valley
        for ch = 1:Snippets_dim(2)
            pp=pp+1;
            Filedata.paramnames{pp} = ['Valley_',num2str(ch),' (uV)'];
            Filedata.params(:,pp) = min(Snippets(:,ch,:),[],3);
        end
        
        % save amplitude
        for ch = 1:Snippets_dim(2)
            pp=pp+1;
            Filedata.paramnames{pp} = ['Amp_',num2str(ch),' (uV)'];
            Filedata.params(:,pp) = max(Snippets(:,ch,:),[],3) - min(Snippets(:,ch,:),[],3);
        end
        
        
        % Reorganize the spike data to perform a PCA accross channels
        Spike_Allsnippets = nan(Snippets_dim(1)*Snippets_dim(2),Snippets_dim(3));
        for ss=1:Snippets_dim(3)
            Spike_Allsnippets(ss,:) = reshape(Snippets(:,:,ss),1, Snippets_dim(1)*Snippets_dim(2));
        end
        [~, PC] = pca(Spike_Allsnippets);
        
        % save PCA values
        for pc = 1:3
            pp=pp+1;
            Filedata.paramnames{pp} = ['PC' num2str(pc)];
            Filedata.params(:,pp) = PC(:,pc);
        end
    else
        disp('No data for this file');
        Filedata = [];
    end
    
    
    %-----------------------------------
    if (~isempty(Filedata))
        Filedata.filename = MatClust_Filename;
        save(MatClust_Filename, '-v7.3', 'Filedata');
    end
end